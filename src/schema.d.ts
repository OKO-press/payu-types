/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/pl/standard/user/oauth/authorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create OAuth Token
         * @description Each payment should be authorized in one of three available modes:
         *     - <code>client_credentials</code> - used for standard integration,
         *     - <code>trusted_merchant</code> - used for authentication of requests made for logged-in shop/application users with fixed <code>extCustomerId</code>,
         *     - <code>partner</code> - special type of a token meant for creating entities (e.g. Shop, POS, URL) within partner firm.
         *
         *     Generated access token is valid for 43199 seconds.
         */
        post: operations["oauth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2_1/paymethods": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve All Available Payment Methods. */
        get: operations["retrieve-payment-methods"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2_1/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create an Order
         * @description Create a new order request.
         */
        post: operations["create-an-order"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2_1/orders/{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an Order
         * @description Retrieve the status and details of an order.
         */
        get: operations["retrieve-an-order"];
        put?: never;
        post?: never;
        /**
         * Cancel an Order
         * @description Cancel (reject) orders processed by the PayU system.
         */
        delete: operations["cancel-an-order"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2_1/orders/{orderId}/captures": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Capture Authorized Order
         * @description Capture whole order and update its status to COMPLETED (ended).
         */
        post: operations["capture-authorized-order"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2_1/orders/{orderId}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * (deprecated) Capture Authorized Order
         * @description Capture an order and update its status to COMPLETED (ended).
         */
        put: operations["capture-authorized-order-deprecated"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2_1/orders/{orderId}/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Transaction
         * @description Retrieve the details of transactions created for an order with specified `orderId`.
         */
        get: operations["retrieve-a-transaction"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2_1/shops/{shopId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Shop Data
         * @description Retrieve your PayU shop balance, id, etc.
         */
        get: operations["retrieve-shop-data"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2_1/orders/{orderId}/refunds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve ALL Refunds Data for the Specified Order */
        get: operations["retrieve-all-refunds-for-the-specified-order"];
        put?: never;
        /**
         * Create a Refund
         * @description Create new refund - this request is idempotent, so if exactly same data will be provided, response will return data of already previously created refund instead of creating new refund.
         */
        post: operations["create-a-refund"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2_1/orders/{orderId}/refunds/{refundId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve Specific Refund Data */
        get: operations["retrieve-specific-refund"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2_1/payouts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a Payout
         * @description Create a payout with the selected destination of funds.
         */
        post: operations["create-a-payout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2_1/payouts/{payoutId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Payout
         * @description Retrieve data of a specified payout.
         */
        get: operations["retrieve-a-payout"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2_1/tokens/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a Token
         * @description In case the customer terminates the user account in your shop or chooses to remove the stored card from the user account, you need to delete the token.
         */
        delete: operations["delete-a-token"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2_1/mcp-partners/{mcpPartnerId}/fx-table": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Rate Table
         * @description Retrieve current table with the conversion rates for the currencies.
         */
        get: operations["retrieve-rate-table"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2_1/fx-providers/ecb/fx-rates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Reference Rates
         * @description You can retrieve a reference rate table that is updated daily. This table encompasses rates released by the European Central Bank (ECB) against EUR, as well as additional rates that are triangulated using EUR (e.g., PLN/USD, CZK/GBP, etc.).
         */
        get: operations["retrieve-reference-rates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2_1/customers/ext/{extCustomerId}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Seller Status
         * @description You can check the verification status of your submerchants.
         */
        get: operations["retrieve-seller-status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2_1/customers/ext/{extCustomerId}/balances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve Seller Balance */
        get: operations["retrieve-seller-balance"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2_1/customers/ext/{extCustomerId}/operations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve Seller Operation History */
        get: operations["retrieve-seller-operation-history"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2_1/customers/ext/{extCustomerId}/feeDebitTransfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Transfer Funds from Seller to Marketplace Balance */
        get: operations["transfer-funds-from-seller-to-marketplace-balance"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2_1/customers/ext/{extCustomerId}/feeCreditTransfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Transfer Funds from Marketplace to Seller Balance */
        get: operations["transfer-funds-from-marketplace-to-seller-balance"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/aml-verification/v1/verification-advice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Verification Advice
         * @description Verify, on the basis of a Personal Identification Number or NIP number, whether a given individual/company has already been registered in the PayU system.
         */
        get: operations["retrieve-marketplace-verification-advice"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/aml-verification/v1/verification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Marketplace Verification Status
         * @description Retrieve the status of the verification with the specific `Id`.
         */
        get: operations["retrieve-marketplace-verification-status"];
        put?: never;
        /**
         * Create Marketplace Verification
         * @description Initialize the verification process of the seller.
         */
        post: operations["create-marketplace-verification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/aml-verification/v1/dataloading/seller": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Seller's Data
         * @description This method allows to send data of the seller (submerchant).
         */
        post: operations["add-sellers-data"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/aml-verification/v1/dataloading/seller/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Seller's Documents
         * @description This method allows to load company related documents.
         */
        post: operations["add-sellers-documents"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/aml-verification/v1/dataloading/associates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Associates Data
         * @description Send the data of the associates (representatives and beneficiaries according to the relevant instructions from PayU).
         */
        post: operations["add-associates-data"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/aml-verification/v1/dataloading/associates/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Associates Documents
         * @description Upload required documents for associates (representatives or beneficiaries).
         */
        post: operations["add-associates-documents"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/aml-verification/v1/dataloading/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Files
         * @description Upload documents to the server.
         */
        post: operations["add-files"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/aml-verification/v1/verification-transfers/manual": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Order for Verification Transfer
         * @description Create an order for the verification transfer service. In response you will be provided with the bank account details to make the transfer.
         */
        post: operations["create-order-for-verification-transfer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/aml-verification/v1/dataloading/payouts/bankAccountData": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Bank Account for Payouts
         * @description Send bank account data for the payouts.
         */
        post: operations["add-bank-account-for-payouts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/aml-verification/v1/dataloading/payouts/payoneer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Payoneer Account for Payouts
         * @description Send bank account data for the payouts. Method is reserved for the users who have verified Payoneer account.
         */
        post: operations["add-payoneer-account-for-payouts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/aml-verification/v1/dataloading/payouts/worldfirst": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Worldfirst Account for Payouts
         * @description Send bank account data for the payouts. Method is reserved for the users who have verified Worldfirst account.
         */
        post: operations["add-worldfirst-account-for-payouts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/aml-verification/v1/verification/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Complete Marketplace Verification
         * @description Inform PayU about completing verification process.
         */
        post: operations["complete-marketplace-verification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/aml-verification/v1/verification/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel Verification
         * @description Cancel verification on every step of verification providing the reason.
         */
        post: operations["cancel-marketplace-verification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/front/card-installments-options": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Retrieve Available Installments Options
         * @description Retrieve available card installments options for specific card. For merchants operating on the Romanian market (Requires contact with a Payu representative first).
         */
        post: operations["retrieve-card-installments"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2_1/reports/{reportId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Statement
         * @description In response to retrieving a statement via the API, PayU returns a statement file (as indicated by the `Content-Type=application/octet-stream`) in the `Content-Disposition` header. You should take this attached binary data and save it with the same name and file extension.
         *
         *     For example, if the value of the `Content-Disposition` header is **attachment; filename="69e45495-bed9-4824-ace9-f7c191449bbb.zip"**, then you should save the attached data on your computer with the same name **69e45495-bed9-4824-ace9-f7c191449bbb.zip**.
         */
        get: operations["retrieve-statement"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2_1/firms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a Firm
         * @description Create a Firm entity for your partner.
         */
        post: operations["create-a-firm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2_1/firms/{firmId}/urls": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a URL for the Partner's Firm
         * @description Create a URL for the specified `firmId`.
         */
        post: operations["create-a-url-for-the-partners-firm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2_1/firms{firmId}/shops": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a Shop for the Partner
         * @description Create a Shop for the specified `firmId`.
         */
        post: operations["create-a-shop-for-the-partner"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2_1/shops/{shopId}/poses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create POS for Partner
         * @description Create a POS, for your partner, for the specified `shopId`.
         */
        post: operations["create-pos-for-partner"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2_1/poses/{posId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve Partner's POS Data
         * @description Retrieve data of the POS with specified `posId`.
         */
        get: operations["retrieve-partners-pos-data"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2_1/firms/{posId}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a User
         * @description Create an additional User for your partner.
         */
        post: operations["create-a-user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2_1/firms/{firmPublicId}/submerchants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a Submerchant */
        post: operations["create-a-submerchant"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2_1/firms/{firmPublicId}/submerchants/{submerchantId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve Submerchant Data */
        get: operations["retrieve-submerchant-data"];
        /** Update Submerchant Data */
        put: operations["update-submerchants-data"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        200: {
            /** @example 5002500000BVmycAAD */
            verificationId?: string;
            /** @example FULL */
            verificationType?: string;
            /**
             * @description Indicates status of the verification transfer.
             *     * **Success** - transfer was received by PayU.
             *     * **Failure** - PayU did not received funds
             *     * **Matched** - transfer has been matched properly.
             *     * **null** - did not have enough information about the transfer.
             * @example null
             * @enum {string}
             */
            verificationTransferStatus?: "Success" | "Failure" | "Matched" | "null";
            /**
             * @description Type of the process.
             * @example OCCASIONAL
             * @enum {string}
             */
            processType?: "OCCASIONAL" | "REGULAR";
            /**
             * @description Possible statuses: <ul> <li><b>POSITIVE</b> - indicates that the seller is accepted and can process transactions with PayU.</li> <li><b>NEGATIVE</b> - indicates that the seller is rejected and can't process transactions with PayU. There is an error code always send for negative scenario.</li> <li><b>REJECTED</b> -  indicates that provided data must be corrected.</li> <li><b>WAITING_FOR_DATA</b> - waiting for data is sent in the notification when the verification was initialized but the request to start verification was not yet received. Provide the necessary data and documents according to the type of submerchant and send POST request on <code complete</code> endpoint.</li> <li><b>WAITING_FOR_VERIFICATION</b> - waiting for verification indicates that data and documents submitted to PayU will be verified by PayU or  currently being verified. Wait for notification about status change.</li> <li><b>CANCELED</b> - canceled. Initiate new verification when it is necessary. Marketplace can not cancel verification intialized by PayU or after sending complete information.</li> </ul>
             * @example REJECTED
             */
            status?: string;
            /** @example 123456test12 */
            sellerId?: string;
            /** @example null */
            note?: string;
            errors?: {
                /** @description Group of fields that indicate which data/document the error code applies to. */
                content?: {
                    /**
                     * @example SELLER_DOCUMENT
                     * @enum {string}
                     */
                    itemType?: "SELLER" | "SELLER_DOCUMENT" | "ASSOCIATE" | "ASSOCIATE_DOCUMENT" | "PAYOUT_ACCOUNT";
                    itemProperties?: {
                        /**
                         * @example PEP_STATEMENT
                         * @enum {string}
                         */
                        documentType?: "ID_CARD" | "PASSPORT" | "DRIVING_LICENCE" | "RESIDENCE_PERMIT" | "OTHER";
                        /** @example 2 */
                        documentId?: string;
                        /** @example null */
                        associateId?: string;
                    };
                };
                /**
                 * @description Error Code.
                 * @example 006
                 */
                code?: string;
            }[];
            /** @example 2020-04-03T09:14:06.000Z */
            updateDate?: string;
            /** @example 2020-04-03T06:36:15.000Z */
            createDate?: string;
        };
        400: {
            status?: {
                /** @description Error type. */
                statusCode?: string;
                /** @description error severity type. */
                severity?: string;
                /** @description Identification code of specific error. */
                code?: string;
                /** @description Cause of the error. */
                codeLiteral?: string;
                /** @description Error description. */
                statusDesc?: string;
            };
        };
        401: {
            status?: {
                /** @description Error type. */
                statusCode?: string;
                /** @description Identification code of specific error. */
                code?: string;
                /** @description Cause of the error. */
                codeLiteral?: string;
                /** @description Error description. */
                statusDesc?: string;
            };
        };
        403: {
            status?: {
                /**
                 * @description Error type.
                 * @enum {string}
                 */
                error?: "access_denied";
                /**
                 * @description Description of error.
                 * @enum {string}
                 */
                error_description?: "Access is denied";
            };
        };
        404: {
            status?: {
                /** @description Error type. */
                statusCode?: string;
                /** @description error severity type. */
                severity?: string;
                /** @description Error description. */
                statusDesc?: string;
            };
        };
        409: {
            status?: {
                /**
                 * @description Error type.
                 * @example 409
                 */
                code?: string;
                /** @description Error message. */
                message?: string;
            };
        };
        500: {
            status?: {
                /** @description Error type. */
                statusCode?: string;
                /** @description Identification code of specific error. */
                code?: string;
                /** @description Cause of the error. */
                codeLiteral?: string;
                /** @description Error description. */
                statusDesc?: string;
            };
        };
        ClientCredentials: {
            /**
             * @description Authorization mode
             * @example client_credentials
             * @enum {string}
             */
            grant_type: "client_credenitals";
            /**
             * @description Merchant's POS identifier in PayU's system. Can be found in PayU's merchant panel
             * @example 145227
             */
            client_id: string;
            /**
             * @description Merchant's secret key. Can be found in PayU's merchant panel
             * @example 12f071174cb7eb79d4aac5bc2f07563f
             */
            client_secret: string;
        };
        TrustedMerchant: {
            /**
             * @description Authorization mode
             * @example trusted_merchant
             * @enum {string}
             */
            grant_type: "trusted_merchant";
            /**
             * @description Merchant's POS identifier in PayU's system. Can be found in PayU's merchant panel
             * @example 145227
             */
            client_id: string;
            /**
             * @description Merchant's secret key. Can be found in PayU's merchant panel
             * @example 12f071174cb7eb79d4aac5bc2f07563f
             */
            client_secret: string;
            /** @description Customer's email address in merchant's system */
            email: string;
            /** @description Customer's identifier in the merchant's system */
            ext_customer_id: string;
        };
        /** @description only usable with special Technical Partner priviliges that allow management of Firms, URLs, Shops and POSes created and managed by Partner */
        Partner: {
            /**
             * @description Authorization mode
             * @example partner
             * @enum {string}
             */
            grant_type: "partner";
            /**
             * @description Partners client_id
             * @example 145227
             */
            client_id: string;
            /**
             * @description Partners client_secret
             * @example 12f071174cb7eb79d4aac5bc2f07563f
             */
            client_secret: string;
            /**
             * @description publicFirmId created by Partner that will be managed
             * @example p3BiPgVO
             */
            firm_id: string;
        };
        /** @description Section containing saved BLIK tokens */
        blikTokens: {
            /** @description BLIK token value. */
            value?: string;
            /**
             * @description Type of the token. Either UID for normal transactions or PAYID for recurring payments.
             * @enum {string}
             */
            type?: "UID" | "PAYID";
            /** @example https://static.payu.com/images/mobile/logos/pbl_blik.png */
            brandImageUrl?: string;
            /** @description Array containing objects about available installments options. */
            bankApplicationReferences?: {
                /**
                 * @description Unique key for assignment of particular banking application to a token. The value of this field is inserted in the order in payMethod.blikData.appKey field.
                 * @example 11111
                 */
                key?: string;
                /**
                 * @description The value of the label for assigning a particular banking application to a token. A list of values for these fields is presented to the customer for selection when paying with the UID token.
                 * @example BLIK label
                 */
                label?: string;
            }[];
            /** @description Contains information about the recurring payment. */
            recurring?: {
                /** @description BLIK recurring payment title. */
                aliasLabel?: string;
                /**
                 * @description Type of the recurring payment.
                 * @enum {string}
                 */
                type?: "O";
                /**
                 * Format: yyyy-MM-dd'T'HH:mm:ssXXX
                 * @description Date of the first transaction in the recurring payment cycle without the customer confirmation.
                 * @example 2026-10-01T00:00:00+02:00
                 */
                initializationDate?: string;
                /**
                 * Format: yyyy-MM-dd'T'HH:mm:ssXXX
                 * @description Expiration date of the PAYID token. Maximum date is 10 years from the creation date of the token. If the value is not provided, token will be valid indifinitely.
                 * @example 2026-10-01T00:00:00+02:00
                 */
                expirationDate?: string;
            };
        }[];
        /** @description Section containing saved card tokens */
        cardTokens: {
            /** @example TOKC_XATB7DF8ACXYTVQIPLWTVPFRKQE */
            value?: string;
            /** @example https://static.payu.com/images/mobile/visa.png */
            brandImageUrl?: string;
            /** @example true */
            preferred?: boolean;
            /**
             * @example ACTIVE
             * @enum {string}
             */
            status?: "NEW" | "ACTIVE" | "EXPIRED";
            /** @example 2026 */
            cardExpirationYear?: number;
            /** @example 7 */
            cardExpirationMonth?: number;
            /** @example 411111******1111 */
            cardNumberMasked?: string;
            /** @example VS */
            cardScheme?: string;
            /** @example VISA */
            cardBrand?: string;
        }[];
        /** @description Section containing available PayByLink payment methods */
        payByLinks: {
            /**
             * @description <code>payType</code> value. You can find available values <b><a href="/europe/docs/get-started/introduction/#paymethods" target="_blank">here</a></b>.
             * @example sgb
             */
            value?: string;
            /**
             * @description Link to <code><payType</code> logo graphic on PayU server.
             * @example https://static.payu.com/images/mobile/logos/pbl_sgb_off.png
             */
            brandImageUrl?: string;
            /**
             * @description Name of <code>payType</code> set by PayU
             * @example SGB Bank
             */
            name?: string;
            /**
             * @example DISABLED
             * @enum {string}
             */
            status?: "ENABLED" | "DISABLED" | "TEMPORARY_DISABLED";
            /** @example 50 */
            minAmount?: number;
            /** @example 99999999 */
            maxAmount?: number;
        }[];
        /** @description Section containing data of donation added to the order. */
        donation: {
            /**
             * @description Donation amount in pennies.
             * @example 500
             */
            amount?: number;
            /** @description Charity identifier provided by PayU. */
            organizationId?: string;
        };
        /** @description Section containing delivery address. For a list of parameters, see section delivery */
        delivery: {
            /** @description Full street address, incl. apartment number. <b>Section recommended for the 3DS 2 authentication</b>. */
            street?: string;
            /** @description Postal box */
            postalBox?: string;
            /** @description Postal code. <b>Section recommended for the 3DS 2 authentication</b>. */
            postalCode?: string;
            /** @description City, <b>section recommended for the 3DS 2 authentication</b>. */
            city?: string;
            /**
             * @description Country principal subdivision like "state" or "province". If provided, must be a valid ISO 3166-2 code (e.g. "UT" for Utah in the USA or "30" for "Wielkopolskie" in Poland). <b>Section recommended for the 3DS 2 authentication</b>.
             * @example 30
             */
            state?: string;
            /** @description Two-letter country code compliant with <b><a href="https://www.iso.org/iso-3166-country-codes.html">ISO-3166</a></b>. <b>Section recommended for the 3DS 2 authentication</b>. */
            countryCode?: string;
            /** @description Address description */
            name?: string;
            /** @description Recipient name */
            recipientName?: string;
            /** @description Ecipient email */
            recipientEmail?: string;
            /** @description Recipient phone number */
            recipientPhone?: string;
        };
        /** @description Section containing buyer data. */
        buyer: {
            /** @description ID of the customer used in merchant system */
            extCustomerId?: string;
            /**
             * @description Buyer's email address. **Required for Installments (PL), Pay Later (PL), Pay Later with Twisto (CZ), 3DS 2 authentication.**
             * @example email@email.com
             */
            email?: string;
            /**
             * @description Buyer's telephone number. Please use +[country code] [number] format. **Required for Pay Later with Twisto (CZ), 3DS 2 authentication.**
             * @example +48 225108001
             */
            phone?: string;
            /**
             * @description Buyer's first name. </br>**Required for Pay Later with Twisto (CZ) and AFT card authorization (Account Funding Transaction)** </br></br>**In case of AFT card authorization you have to use ISO/IEC 8859-1 encoding**.
             * @example John
             */
            firstName?: string;
            /**
             * @description Buyer's last name. </br>**Required for Pay Later with Twisto (CZ) and AFT card authorization (Account Funding Transaction)**</br></br>**In case of AFT card authorization you have to use ISO/IEC 8859-1 encoding**.
             * @example Doe
             */
            lastName?: string;
            /**
             * @description National Identification Number
             * @example 123456789
             */
            nin?: string;
            /**
             * @description Language code, ISO-639-1 compliant. Denotes the language version of PayU hosted payment page and of e-mail messages sent from PayU to the payer.
             * @example pl
             */
            language?: string;
            /**
             * Format: ISO 8601
             * @description Buyer's date of birth. **Required for AFT card authorization (Account Funding Transaction)**.
             * @example 2006-12-03T00:00:00.000+01:00
             */
            birthDate?: string;
            /** @description **Section recommended for the 3DS 2 authentication.** */
            delivery?: components["schemas"]["delivery"];
        };
        /** @description Array of objects related to shipping method. */
        shippingMethods: {
            /**
             * @description Two-letter shipping country code compliant with <b><a href="https://www.iso.org/iso-3166-country-codes.html">ISO-3166</a></b>.
             * @example PL
             */
            country: string;
            /**
             * @description Shipping price.
             * @example 250
             */
            price: number;
            /**
             * @description Shipping method name
             * @example Postal package
             */
            name: string;
        }[];
        /** @description Section containing data of the ordered products. Section <code>products</code> is an array of objects of type product. */
        products: {
            /**
             * @description Name of the product.
             * @example My product
             */
            name: string;
            /**
             * @description Unit price.
             * @example 999
             */
            unitPrice: string;
            /**
             * @description Quantity of given product
             * @example 4
             */
            quantity: string;
            /**
             * @description Product type, which can be virtual or material. **Even if sent, the virtual parameter is not returned in PAYU notifications.**
             * @example true
             */
            virtual?: boolean;
        }[];
        /** @description Array of objects related to transaction identification. */
        shoppingCarts: {
            /**
             * @description Submerchant identifier
             * @example ext-customer-1
             */
            extCustomerId: string;
            /**
             * @description Total amount for given submerchant
             * @example 24950
             */
            amount: number;
            /**
             * @description Marketplace fee. Value should be in range <0, amount>
             * @example 250
             */
            fee?: string;
            shippingMethods?: components["schemas"]["shippingMethods"];
            products: components["schemas"]["products"];
        }[];
        cardPlainData: {
            /** @example 5100052384536818 */
            number?: string;
            /** @example 02 */
            expirationMonth?: string;
            /** @example 29 */
            expirationYear?: string;
            /** @example 123 */
            cvv?: string;
            /** @example MCC0111LL1121 */
            firstTransactionId?: string;
        };
        /** @description Additional data for some Visa Checkout integrations. */
        specificData: {
            name?: string;
            value?: string;
        }[];
        /** @description Additional data for BLIK payment with T6 or token. */
        blikData: {
            /** @description Label proposal associated with given mobile application. This field can be used only during token registration.</br><b>Required for the BLIK Recurring</b>. */
            aliasLabelProposal?: string;
            /** @description UID/PAYID token value assigned by the merchant. This field can be used only during token registration. */
            registerTokenValue?: string;
            /** @description Set to `true` specifies that an alias registration request will be sent. Set to false will result in payment with a T6 authorization code without token registration. */
            register?: boolean;
            /** @description The identifier of the customer's chosen bank mobile application within which the transaction authorization will take place. */
            appKey?: string;
            /**
             * @description The proposed level of transaction authorisation. A value of `NO_CONFIRMATION` means no need for transaction confirmation. In case of recurring payments, the value of `NO_CONFIRMATION` means that the merchant is aware of potential fraud risk, accepts it and takes full responsibility for potential fraudulent transactions.
             * @enum {string}
             */
            recommendedAuthLevel?: "NO_CONFIRMATION" | "REQUIRED_CONFIRMATION";
            /**
             * @description Indicates the market where the BLIK payment will be initiated. If the field is not provided, the default value will be **PL**.
             * @example PL
             * @enum {string}
             */
            countryCode?: "PL" | "SK";
            /** @description Contains information about the recurring payment. */
            recurring?: {
                /**
                 * @description Type of the recurring payment. <b>Required for the recurring payment.</b>
                 * @enum {enum}
                 */
                type: "O";
                /**
                 * Format: yyyy-MM-dd'T'HH:mm:ssXXX
                 * @description Date of the first transaction in the recurring payment cycle without the customer confirmation.
                 * @example 2026-10-01T00:00:00+02:00
                 */
                initializationDate?: string;
                /**
                 * Format: yyyy-MM-dd'T'HH:mm:ssXXX
                 * @description Expiration date of the PAYID token. Maximum date is 10 years from the creation date of the token. If the value is not provided, token will be valid indifinitely.
                 * @example 2026-10-01T00:00:00+02:00
                 */
                expirationDate?: string;
            };
        };
        /** @description Object containing result data from 3DS process. */
        threeDsData: {
            /**
             * @description 3DS status. Following values are allowed to be used:<ul><li><b>Y</b> - successful 3DS2 authentication,</li><li><b>A</b> - 3DS2 authentication attempt.</li></ul>
             * @example Y
             * @enum {enum}
             */
            status3Ds: "Y" | "A";
            /**
             * @description Description related to 3DS result. Passing this parameter as a additional description with the MPI will allow better potential customer support from BOK.
             * @example Authentication successful
             */
            status3DsDescription?: string;
            /** @description Unique identifier of 3DS transaction given by the shop. Field required within 3DS version 1 section. This field <b>should not</b> be sent when attempting 3DS2.x authentication. <ul><li><b>[1 .. 20] characters</b> - for value in plain text,</li><li><b>{28} characters</b> - for Base64encoded value,</li><li><b>{40} characters</b> - for HEXencoded value.</li></ul> */
            xid?: string;
            /**
             * @description Field required within 3DS2.x section. This field should not be sent when attempting 3DS version 1 authentication.
             * @example 3b31b19d-1c06-4ea4-a85a-00af10c66588
             */
            dsTransactionId: string;
            /**
             * @description E-commerce Indicator / UCAF. Values can be passed with "0", e.g. "04", "05", etc. It should be passed always if the MPI provided this information.
             * @example 5
             * @enum {enum}
             */
            eciCode?: 5 | 6 | 7 | 2 | 1 | 0;
            /**
             * @description 3DS cryptogram. It should be passed always if the MPI provided this information.
             * @example AAABBBEAUAAAABgICABQAAAAAAA=
             */
            cavv?: string;
            /**
             * @description Token Authentication Verification Value (TAVV) from external provider.
             * @example AgAAABBEAUAAAABg8CABQAAQEAAA=
             */
            tavv?: string;
        };
        payMethod: {
            /**
             * @description Payment method type.
             * @enum {string}
             */
            type: "PBL" | "CARD_TOKEN" | "PAYMENT_WALL" | "BLIK_AUTHORIZATION_CODE" | "BLIK_TOKEN";
            /**
             * @description Payment type for PBL, CARD_TOKEN.
             * @example c
             */
            value: string;
            /**
             * @description Optional, usage differs depending on payment method. For BLIK integrated transparently: enables to collect 6-digit BLIK code on your website instead of redirecting to BLIK.
             * @example 777123
             */
            authorizationCode?: string;
            /**
             * @description Applicable only to card-based payments, incl. Apple Pay, Google Pay.
             * @default AUTHORIZATION
             * @enum {string}
             */
            authorizationType: "PRE_AUTHORIZATION" | "AUTHORIZATION";
            card?: components["schemas"]["cardPlainData"];
            specificData?: components["schemas"]["specificData"];
            /** @description Additional information required for Marketplace integration - must be equal to `totalAmount` as sum of amount parameters objects in `shoppingCards` array */
            amount?: string;
            blikData?: components["schemas"]["blikData"];
            threeDsData?: components["schemas"]["threeDsData"];
            /**
             * @description Indicates digital wallet.
             * @example VISA_MOBILE
             * @enum {enum}
             */
            sourcePaymentFlow?: "APPLE_PAY" | "CARDS" | "CLICK_TO_PAY" | "MDES" | "GOOGLE_PAY" | "VISA_MOBILE" | "VTS";
            /** @description For merchants operating on the Romanian market (Requires contact with a Payu representative first). */
            cardInstallments?: {
                /**
                 * @description Card installments program obtained by retrieving [Installments Options](#tag/Card-Installments/operation/retrieve-card-installments).
                 * @example BRD_INSTALLMENTS
                 */
                provider?: string;
                /**
                 * @description Selected amount of card installments, obtained by [retrieving Installments Options](#tag/Card-Installments/operation/retrieve-card-installments).
                 * @example 6
                 */
                number?: number;
            };
        };
        /** @description Section allows to directly invoke payment method. Section <code>payMethods</code> is one object of <code>payMethod</code> type. */
        payMethods: {
            payMethod?: components["schemas"]["payMethod"];
        };
        /** @description Section allows to pass currency conversion details if you chose to use Multi-Currency Pricing. */
        mcpData: {
            /**
             * @description termCurrency from the rate table.
             * @example EUR
             */
            mcpCurrency: string;
            /**
             * @description baseCurrency amount converted to termCurrency.
             * @example 10000
             */
            mcpAmount: string;
            /**
             * @description Applied conversion rate.
             * @example 4.2556
             */
            mcpRate: string;
            /**
             * @description Applied FX rate table id.
             * @example 132331
             */
            mcpFxTableId: string;
            /**
             * @description Id provided by PayU.
             * @example 6283a549-8b1a-430d-8a62-eea64327440e
             */
            mcpPartnerId: string;
        };
        /** @description Merchant's preference regarding SCA exemption to be used to exempt card payment from 3DS authentication. Exclusive with challengeRequested. Requires additional configuration to be enabled. */
        exemption: {
            /**
             * @description Either LOW_RISK (also known as TRA - transaction risk analysis compliant with SCA requirements has been performed by the merchant) or LOW_VALUE (low value payment, up to 30 EUR or equivalent in other currency)
             * @example LOW_RISK
             * @enum {string}
             */
            value: "LOW_RISK" | "LOW_VALUE";
            /**
             * @description Either PERFORM_AUTHENTICATION (PayU will return response with WARNING_CONTINUE_3DS and redirection URL code if exemption cannot be applied) or DECLINE (PayU will decline the payment if exemption cannot be applied - error message will be returned synchronously in OrderCreateResponse)
             * @example PERFORM_AUTHENTICATION
             * @enum {string}
             */
            rejectionHandling: "PERFORM_AUTHENTICATION" | "DECLINE";
            /**
             * @description Risk score assigned by merchant's antifraud tool. For informative purposes only.
             * @example 120 - low risk score calculated in Merchants antifraud tool
             */
            riskScore?: string;
        };
        /** @description Browser data required for 3DS 2 browser flow. If not provided, these data will be collected by PayU. It is strongly recommended to include it when charging a stored card (multi-use token), because in some cases it will spare you redirection to PayU's authentication page. */
        browser: {
            /** @description Exact content of the HTTP accept headers as sent from the payer's browser. */
            acceptHeaders: string;
            /**
             * @description IP address of the browser as returned by the HTTP headers.
             * @example 127.0.0.1
             */
            requestIP: string;
            /**
             * @description Total width of the payer's screen in pixels. Obtained from the screen.width HTML DOM property.
             * @example 1920
             */
            screenWidth: string;
            /**
             * @description Obtained from the navigator HTML DOM object.
             * @example false
             */
            javaEnabled: boolean;
            /**
             * @description Obtained from the getTimezoneOffset() method applied to Date object.
             * @example 1
             */
            timezoneOffset: string;
            /**
             * @description Obtained from the navigator HTML DOM object.
             * @example 1280
             */
            screenHeight: string;
            /**
             * @description Exact content of the HTTP user-agent header.
             * @example Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36
             */
            userAgent: string;
            /**
             * @description Obtained from payer's browser using the screen.colorDepth HTML DOM property.
             * @example 32
             */
            colorDepth: string;
            /**
             * @description Obtained from payer's browser using the navigator.language HTML DOM property. Max. 8 chars.
             * @example pl_PL
             */
            language: string;
        };
        /** @description Public key component of the ephemeral key pair generated by the 3DS SDK and used to establish session keys between the 3DS SDK and the issuer. */
        sdkEphemPubKey: {
            /** @example MRy7wofaw77myc7hZef23hmmEOE */
            y?: string;
            /** @example MRy7wofaw77myc7hZef23hmmEOE */
            x?: string;
            /** @example EC */
            kty?: string;
            /** @example P-256 */
            crv?: string;
        };
        /** @description Required if 3DS 2 is to be natively supported in your mobile app. Content needs to be generated by a certified 3DS 2 SDK. This information is not required, but it is strongly recommended to include it when charging a stored card (multi-use token). */
        sdk: {
            /** @example DS_LOA_SDK_ADBV_739485_94783 */
            sdkReferenceNumber: string;
            /**
             * @description Indicates the maximum amount of time (in minutes) for all exchanges. The field shall have value greater or equal to 05.
             * @example 30
             */
            sdkMaxTimeout: string;
            /** @example 9063b12c-fcde-43c7-b28e-8d0af5520e8a */
            sdkAppID: string;
            /**
             * @description Data encrypted by the 3DS SDK.
             * @example 9063b12c-fcde-43c7-b28e-8d0af5520e8a
             */
            sdkEncData: string;
            /** @example b60c9879-ac77-4918-a317-7b01c4317053/8Q==. */
            sdkTransID: string;
            sdkEphemPubKey: components["schemas"]["sdkEphemPubKey"];
        };
        /** @description Indicates whether merchant's own funding (e.g. a gift card) has been used to partially pay for the order. Sum of amounts provided here and of <totalAmount> field denote the real value of order in merchant's system. */
        merchantFunds: {
            /**
             * @description In pennies.
             * @example 100
             */
            amount: string;
            /**
             * @description Currency code compliant with ISO 4217.
             * @example PLN
             */
            currencyCode: string;
        };
        /** @description Set of fields helping to assess risk connected with the order itself (type of goods purchased, shipping method etc.). */
        merchantRiskIndicator: {
            /**
             * @example LOAN
             * @enum {string}
             */
            orderType?: "PURCHASE" | "ACC_FUNDING" | "LOAN";
            /**
             * @description Indicates shipping method chosen for the order.
             * @example TICKETS
             * @enum {string}
             */
            shipIndicator?: "BILLING_ADDRESS" | "VERIFIED_ADDRESS" | "OTHER_ADDRESS" | "SHIP_TO_STORE" | "DIGITAL_GOODS" | "TICKETS" | "NOT_SHIPPED";
            /**
             * @description Indicates order for merchandise with a future availability or release date.
             * @example false
             */
            preOrdered?: boolean;
            /**
             * Format: 2019-03-27T10:57:59.000+01:00
             * @description ISO format applies.
             * @example 2019-03-27T10:57:59.000+01:00
             */
            preOrderedDate?: string;
            /**
             * @example OVERNIGHT
             * @enum {string}
             */
            deliveryTimeFrame?: "ELECTRONIC" | "SAME_DAY" | "OVERNIGHT" | "TWO_OR_MORE_DAYS";
            /**
             * @description Indicates if the same purchase has been ordered again.
             * @example false
             */
            reordered?: boolean;
            merchantFunds?: components["schemas"]["merchantFunds"];
        };
        /** @description Additional information in case of a recurring payment. */
        recurring: {
            /**
             * @description The minimum number of days between recurring payments (e.g. setting it to <b>7</b> for a weekly cycle). However, according to the recommendations of card schemes, when dealing with recurring payments that have a variable frequency, it's advised to use a value of <b>1</b> for this parameter.
             * @example 7
             */
            frequency?: string;
            /**
             * Format: 2025-03-27T00:00:00.000Z
             * @description Date after no further recurring payments will be performed. According to recommendation by the card schemes, in cases where there is no established expiry or end date of recurring (e.g. subscriptions), the value of "9999-12-31T00:00:00Z" should be used.
             * @example 2025-03-27T00:00:00.000Z
             */
            expiry?: string;
        };
        /** @description Informations about cardholders account. */
        accountInformation: {
            /**
             * Format: 2019-03-27T10:57:59.000+01:00
             * @description Date when the account has been created for the cardholder.
             * @example 2019-03-27T10:57:59.000+01:00
             */
            createDate?: string;
            /**
             * @description Indicates whether merchant has experienced suspicious/fraudulent activity for this account.
             * @example false
             */
            suspiciousActivity?: boolean;
            /**
             * Format: 2019-03-27T10:57:59.000+01:00
             * @description Date when the shipping address used for this order was first used.
             * @example 2019-03-27T10:57:59.000+01:00
             */
            deliveryAddressFirstUsedDate?: string;
            /**
             * @description Indicates when this shipping address was first used.
             * @example THIS_TRANSACTION
             * @enum {string}
             */
            deliveryAdressUsageIndicator?: "THIS_TRANSACTION" | "LESS_THAN_30_DAYS" | "30_TO_60_DAYS" | "MORE_THAN_60_DAYS";
            /**
             * @description Orders created in merchant's system for this account in the past 12 months.
             * @example 46
             */
            pastOrdersYear?: number;
            /**
             * @description Orders created in merchant's system for this account in the last 24 hours.
             * @example 125
             */
            pastOrdersDay?: number;
            /**
             * @description Fulfilled (successful) orders created in merchant's system for this account in the past 6 months.
             * @example 12
             */
            purchasesLastSixMonths?: number;
            /**
             * Format: 2019-03-27T10:57:59.000+01:00
             * @description Date when account details were last changed.
             * @example 2019-03-27T10:57:59.000+01:00
             */
            changeDate?: string;
            /**
             * @description Indicates time when account information was last changed.
             * @example THIS_TRANSACTION
             * @enum {string}
             */
            changeIndicator?: "THIS_TRANSACTION" | "LESS_THAN_30_DAYS" | "30_TO_60_DAYS" | "MORE_THAN_60_DAYS";
            /**
             * Format: 2019-03-27T10:57:59.000+01:00
             * @description Date when account password was last changed.
             * @example 2019-03-27T10:57:59.000+01:00
             */
            passwordChanged?: string;
            /**
             * @description Indicates whether and when the password was last changed.
             * @example NO_CHANGE
             * @enum {string}
             */
            passwordChangeIndicator?: "NO_CHANGE" | "THIS_TRANSACTION" | "LESS_THAN_30_DAYS" | "30_TO_60_DAYS" | "MORE_THAN_60_DAYS";
            /**
             * @description Indicates whether cardholder's name matches recipient's name.
             * @example true
             */
            nameToRecipientMatch?: boolean;
            /**
             * @description Indicates attempts to add a card to cardholder's account in merchant's system within last 24 hours.
             * @example 3
             */
            addCardAttemptsDay?: string;
            /**
             * @description Authentication method used to recognize cardholder.
             * @example GUEST
             * @enum {string}
             */
            authMethod?: "GUEST" | "LOGIN" | "FEDERATED_ID" | "THIRD_PARTY" | "ISSUER" | "FIDO";
            /**
             * Format: 2019-03-27T10:57:59.000+01:00
             * @description Date and time when authentication was performed.
             * @example 2019-03-27T10:57:59.000+01:00
             */
            authDateTime?: string;
            /**
             * Format: 2019-03-27T10:57:59.000+01:00
             * @description Date when card account has been stored with merchant.
             * @example 2019-03-27T10:57:59.000+01:00
             */
            cardAddedDate?: string;
            /**
             * @description Indicates if and when the card was stored with merchant.
             * @example THIS_TRANSACTION
             * @enum {string}
             */
            cardAddedIndicator?: "GUEST" | "THIS_TRANSACTION" | "LESS_THAN_30_DAYS" | "30_TO_60_DAYS" | "MORE_THAN_60_DAYS";
        };
        billingAddress: {
            /**
             * @description Full street address, incl. apartment number.
             * @example Test Street
             */
            street?: string;
            /**
             * @description Postal/ZIP code.
             * @example 01-000
             */
            postalCode?: string;
            /**
             * @description City name.
             * @example Test City
             */
            city?: string;
            /**
             * @description Country principal subdivision like "state" or "province". If provided, must be a two-letter country code compliant with ISO-3166.
             * @example 30
             */
            state?: string;
            /**
             * @description Two-letter country code compliant with ISO-3166.
             * @example PL
             */
            countryCode?: string;
        };
        /** @description Describes cardholder's account data in merchant's possession, including details of account run for the cardholder in merchant's system **You have to use ISO/IEC 8859-1 encoding**.</br></br>You can use this field for providing cardholder name for AFT card authorization (Account Funding Transaction) instead of using buyer's first and last name. */
        cardholder: {
            /**
             * @description Cardholder name and surname.
             * @example John Doe
             */
            name?: string;
            accountInformation?: components["schemas"]["accountInformation"];
            billingAddress?: components["schemas"]["billingAddress"];
        };
        /** @description Contains optional fields required by 3DS 2 authentication protocol. */
        threeDsAuthentication: {
            /**
             * @description Merchant's preference regarding 3DS 2 challenge. Exclusive with exemption. Maybe overridden by PayU.
             * @enum {string}
             */
            challengeRequested?: "YES" | "NO" | "MANDATE";
            exemption?: components["schemas"]["exemption"];
            browser?: components["schemas"]["browser"];
            sdk?: components["schemas"]["sdk"];
            merchantRiskIndicator?: components["schemas"]["merchantRiskIndicator"];
            recurring?: components["schemas"]["recurring"];
            cardholder?: components["schemas"]["cardholder"];
        };
        /** @description Section containing data about shipping address. Section <shippingMethod.address> is a single object of type address */
        address: {
            /**
             * @description The full name of the pickup point, including its unique identifier.
             * @example Parcel locker POZ29A
             */
            pointId?: string;
            /** @description Street name, possibly including house and flat number. */
            street?: string;
            /** @description Street number */
            streetNo?: string;
            /** @description Flat number */
            flatNo?: string;
            /** @description Postal Code */
            postalCode?: string;
            /** @description City */
            city?: string;
            /** @description Two-letter country code compliant with ISO-3166. */
            countryCode?: string;
        };
        /** @description Section containing data of shipping method. Section <shippingMethod> is a single object of type shippingMethod. */
        shippingMethod: {
            /**
             * @description Type of shipment
             * @enum {string}
             */
            type?: "COURIER" | "COLLECTION_POINT_PICKUP" | "PARCEL_LOCKER" | "STORE_PICKUP";
            /** @description Shipping cost */
            price?: string;
            address?: components["schemas"]["address"];
        };
        /** @description Section containing data of the ordered products. Section <credit.shoppingCarts> is an array of objects of type shoppingCart. */
        shoppingCart: {
            shippingMethod?: components["schemas"]["shippingMethod"];
            /** @description Section containing data of the ordered products. Section <code>products</code> is an array of objects of type product. */
            products?: {
                /** @description Name of the product */
                name?: string;
                /** @description Unit price */
                unitPrice?: string;
                /** @description Quantity of */
                quantity?: string;
                /** @description Product type, which can be virtual or material. */
                virtual?: boolean;
                /**
                 * Format: 2019-03-27T10:57:59.000+01:00
                 * @description Marketplace date from which the product (or offer) is available, ISO format applies.
                 */
                listingDate?: string;
            }[];
            /** @description Submerchant identifier. This field should be consistent with field extCustomerId in shoppingCarts section when order is placed in marketplace. */
            extCustomerId?: string;
        }[];
        /** @description Section containing credit data. This information is not required, but it is strongly recommended to include it. Otherwise the buyer will be prompted to provide missing data on provider page when payment by Installments or Pay later. */
        credit: {
            shoppingCarts?: components["schemas"]["shoppingCart"];
            /** @description Section containing data of person applying for a credit. */
            applicant?: {
                /**
                 * @description Applicant's email address
                 * @example test@test.com
                 */
                email?: string;
                /**
                 * @description Applicant's phone number
                 * @example 123456789
                 */
                phone?: string;
                /**
                 * @description Applicant's first name
                 * @example Joe
                 */
                firstName?: string;
                /**
                 * @description Applicant's last name
                 * @example Doe
                 */
                lastName?: string;
                /**
                 * @description Language code, ISO-639-1 compliant. Denotes the language version of PayU hosted payment page and of e-mail messages sent from PayU to the payer.
                 * @example pl
                 */
                language?: string;
                /**
                 * @description National Identification Number
                 * @example 123456789
                 */
                nin?: string;
                /** @description Section containing data about applican's address. */
                address?: {
                    /**
                     * @description Street name, possibly including house and flat number.
                     * @example Test Street
                     */
                    street?: string;
                    /**
                     * @description Street number
                     * @example 123
                     */
                    streetNo?: string;
                    /**
                     * @description Flat number
                     * @example 987
                     */
                    flatNo?: string;
                    /**
                     * @description Postal Code
                     * @example 01-000
                     */
                    postalCode?: string;
                    /**
                     * @description City
                     * @example Test City
                     */
                    city?: string;
                    /**
                     * @description Two-letter country code compliant with ISO-3166.
                     * @example PL
                     */
                    countryCode?: string;
                };
                /** @description Additional information about person applying for credit. */
                additionalInfo?: {
                    /**
                     * @description Information whether there were previous, successfully completed orders for applicant.
                     * @example YES
                     */
                    hasSuccessfullyFinishedOrderInShop?: string;
                };
            };
            /** @description Extra merchant data mandatory for merchants operating in certain segments. You will find more information about this object and its parameters on **[Klarna Documentation Page](https://docs.klarna.com/klarna-payments/additional-resources/use-cases/extra-merchant-data/)**. */
            klarnaAttachment?: {
                content_type?: string;
                body?: string;
            };
        };
        submerchant: {
            /** @description submerchant ID when payment is created by Payment Facilitator for Submerchant */
            id?: string;
        };
        settings: {
            /** @description List of allowed installment numbers for any number of specific providers, eg. "OPTIMO": [1, 2, 3]. For merchants operating on the Romanian market (requires contact with a Payu representative first). Available providers: <ul><li>CARD_AVANTAJ</li><li>STAR_BT</li><li>UNICREDIT</li><li>BRD_INSTALLMENTS</li><li>RAIFFEISEN</li><li>GARANTI_RO</li><li>BCR_INSTALLMENTS</li><li>ALPHABANK_INSTALLMENTS</li><li>OPTIMO</li><li>CARD_EMAG</li></ul> */
            cardInstallmentsOptions?: {
                [key: string]: unknown[];
            };
        };
        /** @description Array of objects related to transaction identification. */
        properties: {
            /**
             * @description Static value. The payment identifier, displayed on transaction statements as "Trans ID" and within the transaction search option in the Management Panel.
             * @example PAYMENT_ID
             */
            name?: string;
            /**
             * @description Transaction ID in PayU system.
             * @example 1234567890
             */
            value?: string;
        }[];
        Full: null;
        Partial: {
            /**
             * @description Amount you want to capture. Must be less than captured order amount. **Can be used only during partial capture**.
             * @example 900
             */
            amount: string;
            /**
             * @description Currency of the order. **Can be used only during partial capture**
             * @example EUR
             */
            currencyCode: string;
        };
        card: {
            /** @description Array of order objects. */
            transactions?: {
                payMethod?: {
                    /**
                     * @description Payment method code
                     * @example c
                     */
                    value?: string;
                };
                /**
                 * @description Payment flow of of payment (for card and card based instruments payments)
                 * @example CARD
                 * @enum {string}
                 */
                paymentFlow?: "APPLE_PAY" | "CARD" | "CARD_INSTALLMENTS" | "CLICK_TO_PAY" | "FIRST_ONE_CLICK_CARD" | "GOOGLE_PAY" | "GOOGLE_PAY_TOKENIZED" | "VISA_MOBILE" | "ONE_CLICK_CARD" | "ONE_CLICK_CARD_RECURRING" | "ONE_CLICK_MAIL_ORDER" | "ONE_CLICK_MAIL_RECURRING" | "ONE_CLICK_PHONE_ORDER" | "ONE_CLICK_PHONE_RECURRING";
                /**
                 * @description Transaction capture expiration date.
                 * @example 2024-06-20T09:05:44.238+02:00
                 */
                validUntil?: string;
                /** @description Chosen payment method */
                card?: {
                    cardData?: {
                        /**
                         * @description Masked card number (real number or token - in case of Apple Pay and Google Pay Tokenized).
                         * @example 543402******4014
                         */
                        cardNumberMasked?: string;
                        /**
                         * @description Payment organization: MC (MasterCard/Maestro), VS (Visa)
                         * @example MC
                         */
                        cardScheme?: string;
                        /**
                         * @description Card profile (CONSUMER or BUSINESS)
                         * @example CONSUMER
                         */
                        cardProfile?: string;
                        /**
                         * @description Card classification (CREDIT/DEBIT)
                         * @example DEBIT
                         */
                        cardClassification?: string;
                        /**
                         * @description Response code
                         * @example 000
                         */
                        cardResponseCode?: string;
                        /**
                         * @description Response code with description
                         * @example 000 - OK
                         */
                        cardResponseCodeDesc?: string;
                        /**
                         * @description Electronic Commerce Indicator
                         * @example 2
                         */
                        cardEciCode?: string;
                        /**
                         * @description 3DS verification status
                         * @example Y
                         */
                        card3DsStatus?: string;
                        /**
                         * @description Indicates whether the authentication was frictionless or with challenge
                         * @example YES
                         */
                        card3DsFrictionlessIndicator?: string;
                        /**
                         * @description Description of 3DS status
                         * @example MessageVersion=2.1.0,browser flow,3DS method not available,dynamic authentication,no cancel indicator,no status reason
                         */
                        card3DsStatusDescription?: string;
                        /**
                         * @description Country in which card was issued. Two-letter country code compliant with ISO-3166
                         * @example PL
                         */
                        cardBinCountry?: string;
                        /**
                         * @description Identifier of the first of recurring payments or Card-on-File, granted by the payment organisation
                         * @example MCC0111LL1121
                         */
                        firstTransactionId?: string;
                    };
                };
                /**
                 * @description Optional informaction about transaction result code: <ul> <li><b>AUT_ERROR_NO_AUTHORIZATION</b> - authorization was not received, transaction cancelled.</li> <li><b>AUT_ERROR_ANTIFRAUD_DECLINED</b> - transaction rejected at the authoriztion stage by the antifraud system.</li> <li><b>REG_ERROR_ANTIFRAUD_DECLINED</b> - transaction rejected at registration stage by antifraud system.</li> <li><b>REG_ERROR_AUTHENTICATION_REJECTED</b> - Authentication was rejected by a third-party service. <ul><li>For Visa Mobile payment method: Authentication failed in either the Visa Mobile or Issuer application.</li></ul></li> </ul>
                 * @example AUT_ERROR_NO_AUTHORIZATION
                 * @enum {string}
                 */
                resultCode?: "AUT_ERROR_NO_AUTHORIZATION" | "AUT_ERROR_ANTIFRAUD_DECLINED" | "REG_ERROR_ANTIFRAUD_DECLINED";
            }[];
        };
        pbl: {
            /** @description Array of order objects. */
            transactions?: {
                payMethod?: {
                    /**
                     * @description Payment method code
                     * @example m
                     */
                    value?: string;
                };
                /**
                 * @description Defines how payments are handled.
                 * @enum {string}
                 */
                paymentFlow?: "PBL" | "PEX_BANK";
                bankAccount?: {
                    /**
                     * @description Bank account number from which payment was made.
                     * @example 80607787095718703296721164
                     */
                    number?: string;
                    /**
                     * @description Name of the account holder from which payment was made (or full data – name, surname and address).
                     * @example JAN KOWALSKI
                     */
                    name?: string;
                    /**
                     * @description City included in account holder address.
                     * @example WARSZAWA
                     */
                    city?: string;
                    /**
                     * @description Postal code included in account holder address.
                     * @example 02-638
                     */
                    postalCode?: string;
                    /**
                     * @description Street name and house number included in account holder address.
                     * @example UL.NOWOWIEJSKIEGO 8
                     */
                    street?: string;
                    /**
                     * @description Account holder address.
                     * @example Warszawa Nowowiejskiego 8
                     */
                    address?: string;
                };
                /**
                 * @description Optional informaction about transaction result code: <ul> <li><b>AUT_ERROR_NO_AUTHORIZATION</b> - authorization was not received, transaction cancelled.</li> <li><b>AUT_ERROR_ANTIFRAUD_DECLINED</b> - transaction rejected at the authoriztion stage by the antifraud system.</li> <li><b>REG_ERROR_ANTIFRAUD_DECLINED</b> - transaction rejected at registration stage by antifraud system.</li> <li><b>REG_ERROR_AUTHENTICATION_REJECTED</b> - Authentication was rejected by a third-party service. <ul><li>For Visa Mobile payment method: Authentication failed in either the Visa Mobile or Issuer application.</li></ul></li> </ul>
                 * @example AUT_ERROR_NO_AUTHORIZATION
                 * @enum {string}
                 */
                resultCode?: "AUT_ERROR_NO_AUTHORIZATION" | "AUT_ERROR_ANTIFRAUD_DECLINED" | "REG_ERROR_ANTIFRAUD_DECLINED";
            }[];
        };
        blik: {
            /** @description Array of order objects. */
            transactions?: {
                payMethod?: {
                    /**
                     * @description Payment method code.
                     * @example blik
                     */
                    value?: string;
                };
                /**
                 * @description Defines how payments are handled.
                 * @enum {string}
                 */
                paymentFlow?: "BLIK_PBL" | "BLIK_AUTHORIZATION_CODE" | "BLIK_AUTHORIZATION_CODE_WITH_UID_TOKEN_REGISTERING" | "BLIK_UID_TOKEN" | "BLIK_AUTHORIZATION_CODE_WITH_PAYID_TOKEN_TYPE_O_REGISTERING" | "BLIK_PAYID_TOKEN_TYPE_O";
                /** @description Transaction handling result code. */
                resultCode?: string;
                blik?: {
                    /** @description The transaction identifier assigned by the BLIK system. */
                    txRef?: string;
                    /** @description Transaction identifier assigned by PayU. */
                    extTxRef?: string;
                };
            }[];
        };
        /** @description Section containing Shop balance information. */
        balance: {
            /**
             * @description ISO 4217 currency code of currency in which Shop balance is kept.
             * @example PLN
             */
            currencyCode?: string;
            /**
             * @description total balance of funds on Shop
             * @example 1234567890
             */
            total?: number;
            /**
             * @description value of available funds that are under Merchant disposition, excluding funds locked by PayU system
             * @example 987654321
             */
            available?: number;
        };
        refundRetrievePending: {
            /**
             * @description ID of the refund
             * @example 5000000142
             */
            refundId?: string;
            /**
             * @description External refund ID.
             * @example hdjJduUEEH2
             */
            extRefundId?: string;
            /**
             * @description Amount of the refund. If this is left blank, all funds will be returned to the buyer.
             * @example 10000
             */
            amount?: string;
            /**
             * @description Refund description
             * @example Refund for order <orderId>
             */
            description?: string;
            /**
             * @description Date of refund creation.
             * @example 2020-07-02T09:19:03.896+02:00
             */
            creationDateTime?: string;
            /** @description Currency code compliant with ISO 4217. */
            currencyCode?: string;
            /**
             * @description Timestamp of the status.
             * @example 2020-07-02T09:19:04.016+02:00
             */
            statusDatetime?: string;
            /**
             * @description Refund status code.
             * @example PENDING
             */
            status?: string;
        };
        refundRetrieveCanceled: {
            /**
             * @description ID of the refund
             * @example 5000000142
             */
            refundId?: string;
            /**
             * @description External refund ID.
             * @example hdjJduUEEH2
             */
            extRefundId?: string;
            /**
             * @description Amount of the refund. If this is left blank, all funds will be returned to the buyer.
             * @example 10000
             */
            amount?: string;
            /**
             * @description Refund description
             * @example Refund for order <orderId>
             */
            description?: string;
            /**
             * @description Date of refund creation.
             * @example 2020-07-02T09:19:03.896+02:00
             */
            creationDateTime?: string;
            /** @description Currency code compliant with ISO 4217. */
            currencyCode?: string;
            /**
             * @description Timestamp of the status.
             * @example 2020-07-02T09:19:04.016+02:00
             */
            statusDatetime?: string;
            /** @description Refund status code. */
            status?: string;
            /** @description Information about error. */
            statusError?: {
                /** @description Error type. */
                code?: string;
                /** @description Error information. */
                description?: string;
            };
        };
        refundRetrieveFinalized: {
            /**
             * @description ID of the refund
             * @example 5000000142
             */
            refundId?: string;
            /**
             * @description External refund ID.
             * @example hdjJduUEEH2
             */
            extRefundId?: string;
            /**
             * @description Amount of the refund. If this is left blank, all funds will be returned to the buyer.
             * @example 10000
             */
            amount?: string;
            /**
             * @description Refund description
             * @example Refund for order <orderId>
             */
            description?: string;
            /**
             * @description Date of refund creation.
             * @example 2020-07-02T09:19:03.896+02:00
             */
            creationDateTime?: string;
            /** @description Currency code compliant with ISO 4217. */
            currencyCode?: string;
            /**
             * @description Timestamp of the status.
             * @example 2020-07-02T09:19:04.016+02:00
             */
            statusDatetime?: string;
            /**
             * @description Refund status code.
             * @example FINALIZED
             */
            status?: string;
        };
        /** Standard Payout */
        StandardPayout: {
            /**
             * @description Public identifier for the shop within PayU, under which payout will be executed.
             * @example 1a2B3Cx
             */
            shopId: string;
            /** @description Payout information. */
            payout?: {
                /** @description Payout description. */
                description?: string;
                /** @description External identificator of Payout assigned by Merchant. Parameter must be unique within the scope of a given shop, upon encountering an error, you should use a different value. */
                extPayoutId: string;
                /**
                 * @description amount for which Payout should be created
                 * @example 987654321
                 */
                amount: number;
                /**
                 * Format: VS=888111
                 * @description Allows sending additional information to the system (Variable Symbol). Data from this field is send only to the supporting banks. <b>This solution is dedicated only for Czech market.</b>
                 * @example VS=888111
                 */
                additionalVariables?: string;
            };
        };
        /** @description Payout information. */
        payout: {
            /** @description Payout description. */
            description?: string;
            /** @description External identificator of Payout assigned by Merchant. Parameter must be unique within the scope of a given shop, upon encountering an error, you should use a different value. */
            extPayoutId: string;
            /**
             * @description Amount for which Payout should be created.
             * @example 10000
             */
            amount: Record<string, never>;
            /**
             * Format: VS=888111
             * @description Allows sending additional information to the system (Variable Symbol). Data from this field is send only to the supporting banks. <b>This solution is dedicated only for Czech market</b>.
             * @example VS=888111
             */
            additionalVariables?: string;
            /** @description Flag indicating whether payout was made to a foreign account. */
            foreign?: string;
        };
        /** @description Information about account to which payout should be sent. */
        account: {
            /** @description Bank account number. Required account formats for foreign transfers: Polish account: NRB, IBAN. Czech account: IBAN, internal in ([0-9]{1,6}[ -])?[0-9]{2,10}[ /][0-9]{4}) format. As for now, there is no format restrictions for national bank transfers. */
            accountNumber: string;
            /** @description Name of the bank. <b>Required for <code>foreign</code> flag set to true</b>. */
            bankName?: string;
            /** @description Bank's SWIFT code. <b>Required for <code>foreign</code> flag set to true</b>. */
            swiftCode?: string;
        };
        /** @description Payout recipient's name. */
        customerAddress: {
            /** @description Payout recipient's name. */
            name: string;
            /** @description Payout recipient's address details. Two-letter country code compliant with ISO-3166. <b>Required for <code>foreign</code> flag set to true</b>. */
            countryCode?: string;
            /** @description Payout recipient's address details - city. <b>Required for <code>foreign</code> flag set to true</b>. */
            city?: string;
            /** @description Payout recipient's address details - postal code. */
            postalCode?: string;
            /** @description Payout recipient's address details - street. <b>Required for <code>foreign</code> flag set to true</b>. */
            street?: string;
        };
        /** @description Bank address information. */
        bankAddress: {
            /** @description Bank address information - street. <b>Required for <code>foreign</code> flag set to true</b>. */
            street?: string;
            /** @description Bank address information - postal code. <b>Required for <code>foreign</code> flag set to true</b>. */
            postalCode?: string;
            /** @description Bank address information - city. <b>Required for <code>foreign</code> flag set to true</b>. */
            city?: string;
            /** @description Bank address information. Two-letter country code compliant with ISO-3166. <b>Required for <code>foreign</code> flag set to true</b>. */
            countryCode?: string;
        };
        /** Bank Account Payout */
        BankAccountPayout: {
            /**
             * @description Public identifier for the shop within PayU, under which payout will be executed.
             * @example 1a2B3Cx
             */
            shopId: string;
            payout: components["schemas"]["payout"];
            account: components["schemas"]["account"];
            customerAddress: components["schemas"]["customerAddress"];
            bankAddress?: components["schemas"]["bankAddress"];
        };
        /** @description Required section designed to limit the risk of fraud or money laundering. */
        payee: {
            /**
             * @description Customer (payee) id assigned in the merchant system.
             * @example customer-id-1
             */
            extCustomerId: string;
            /**
             * Format: 2025-03-27T00:00:00.000Z
             * @description Date when the user was created in the merchant system.
             * @example 2025-03-27T00:00:00.000Z
             */
            accountCreationDate: string;
            /**
             * @description Customer (payee) phone number.
             * @example 48 225108001
             */
            phoneNumber?: string;
            /**
             * @description Customer (payee) email address.
             * @example email@email.com
             */
            email: string;
        };
        /** @description Data of the card that the payout will be made to. <b>Required in case of a payout to the card number</b>. */
        cardForPayout: {
            /**
             * @description Card number.
             * @example 4444333322221111
             */
            number: string;
            /**
             * @description Card's expiration date - month.
             * @example 11
             */
            expirationMonth: string;
            /**
             * @description Card's expiration date - year.
             * @example 2029
             */
            expirationYear: string;
        };
        /** Card Payout */
        CardPayout: {
            /**
             * @description Public identifier for the shop within PayU, under which payout will be executed.
             * @example 1a2B3Cx
             */
            shopId: string;
            payout: components["schemas"]["payout"];
            payee: components["schemas"]["payee"];
            customerAddress: components["schemas"]["customerAddress"];
            /**
             * @description Card token representing card to which payout will be made. <b>Required in case of a payout to the card token</b>.
             * @example TOKC_2IHRST6HKSST3H62K2GS8pElI862
             */
            cardToken?: string;
            card?: components["schemas"]["cardForPayout"];
        };
        /** Payout for Marketplace */
        MarketplacePayout: {
            /**
             * @description Public identifier for the shop within PayU, under which payout will be executed.
             * @example 1a2B3Cx
             */
            shopId: string;
            /** @description Information about submerchant account to which payout should be sent. */
            account: {
                /**
                 * @description Unique submerchant identifier assigned by the Marketplace.
                 * @example submerchant1
                 */
                extCustomerId: string;
            };
            payout: {
                /** @description Payout description. */
                description?: string;
                /** @description External identificator of Payout assigned by Merchant. Parameter must be unique within the scope of a given shop, upon encountering an error, you should use a different value. */
                extPayoutId: string;
                /**
                 * @description Amount for which Payout should be created.
                 * @example 49
                 */
                amount: Record<string, never>;
                /**
                 * Format: ISO4217
                 * @description Shop currency from which the conversion will be made.
                 * @example PLN
                 */
                currencyCode: string;
            };
        };
        /** @description Section containing details of the payout conversion. */
        fxData: {
            /**
             * @description Partner id for currency exchange at PayU.
             * @example 9999e44b-f68f-42e1-ad6c-3735ba1e2954
             */
            partnerId: string;
            /**
             * Format: ISO4217
             * @description Currency code after conversion. Currently supported currency codes are **PLN**, **EUR**, **CZK**.
             * @example EUR
             * @enum {string}
             */
            currencyCode: "PLN" | "EUR" | "CZK";
            /**
             * @description The amount of payout after conversion that the marketplace seller will receive.
             * @example 11
             */
            amount: Record<string, never>;
            /**
             * @description The rate at which the payout currency is converted.
             * @example 0.22458
             */
            rate: Record<string, never>;
            /**
             * @description The ID of the exchange rate table retrieved by the merchant from PayU, determining the basis for currency conversion during payment.
             * @example 2055
             */
            tableId: string;
        };
        /** FxPayout */
        FxPayout: {
            /**
             * @description Public identifier for the shop within PayU, under which payout will be executed.
             * @example 1a2B3Cx
             */
            shopId: string;
            /** @description Information about submerchant account to which payout should be sent. */
            account: {
                /**
                 * @description Unique submerchant identifier assigned by the Marketplace.
                 * @example submerchant1
                 */
                extCustomerId: string;
            };
            payout: {
                /** @description Payout description. */
                description?: string;
                /** @description External identificator of Payout assigned by Merchant. Parameter must be unique within the scope of a given shop, upon encountering an error, you should use a different value. */
                extPayoutId: string;
                /**
                 * @description Amount for which Payout should be created.
                 * @example 49
                 */
                amount: Record<string, never>;
                /**
                 * Format: ISO4217
                 * @description Shop currency from which the conversion will be made.
                 * @example PLN
                 */
                currencyCode: string;
            };
            fxData: components["schemas"]["fxData"];
        };
        PAYMENT_RECEIVED: {
            /** @description List of operations. */
            operations?: {
                /**
                 * @description Operation type.
                 * @example PAYMENT_RECEIVED
                 * @enum {string}
                 */
                type?: "PAYMENT_SENT" | "PAYMENT_RECEIVED" | "PAYOUT" | "REFUND_SENT" | "REFUND_RECEIVED" | "RETURN" | "ADMIN_TRANSFER_SENT" | "ADMIN_TRANSFER_RECEIVED" | "FEE_TRANSFER_SENT" | "FEE_TRANSFER_RECEIVED" | "CHARGEBACK" | "ADMIN_CORRECTION";
                /** @description Amount (of order, refund, payout). */
                amount?: string;
                /**
                 * @description Currency code according to ISO-4217.
                 * @example PLN
                 */
                currencyCode?: string;
                /** @description Operation description. */
                description?: string;
                /**
                 * @description Operation status.
                 * @example COMPLETED
                 */
                status?: string;
                /**
                 * Format: 2019-11-30T20:33:44+02:00
                 * @description Operation request moment.
                 */
                creationDate?: string;
                /**
                 * Format: 2019-11-30T22:33:44+02:00
                 * @description Operation ending moment.
                 */
                eventDate?: string;
                details?: {
                    /** @description Order identifier. */
                    orderId?: string;
                    /** @description External order identifier. */
                    extOrderId?: string;
                    /** @description Marketplace fee amount. */
                    feeAmount?: string;
                    /** @description Order elements. */
                    counterparties?: {
                        /** @description Buyer identifier. */
                        extCustomerId?: string;
                        /** @description Buyer name. */
                        name?: string;
                        /** @description Buyer email. */
                        email?: string;
                        /** @description List of products in order. */
                        products?: {
                            /** @description Product name. */
                            name?: string;
                            /** @description Unit price of product */
                            unitPrice?: string;
                            /** @description Quantity */
                            quantity?: string;
                        }[];
                    };
                };
                funds?: Record<string, never>[];
            }[];
            pageResponse?: {
                /** @description Total number of records found. */
                records?: string;
                /** @description Number of returned operations. */
                size?: string;
                /** @description Page count. */
                pageCount?: string;
            };
        };
        REFUND_SENT: {
            /** @description List of operations. */
            operations?: {
                /**
                 * @description Operation type.
                 * @example REFUND_SENT
                 * @enum {string}
                 */
                type?: "PAYMENT_SENT" | "PAYMENT_RECEIVED" | "PAYOUT" | "REFUND_SENT" | "REFUND_RECEIVED" | "RETURN" | "ADMIN_TRANSFER_SENT" | "ADMIN_TRANSFER_RECEIVED" | "FEE_TRANSFER_SENT" | "FEE_TRANSFER_RECEIVED" | "CHARGEBACK" | "ADMIN_CORRECTION";
                /** @description Amount (of order, refund, payout). */
                amount?: string;
                /**
                 * @description Currency code according to ISO-4217.
                 * @example PLN
                 */
                currencyCode?: string;
                /** @description Operation description. */
                description?: string;
                /**
                 * @description Operation status.
                 * @example COMPLETED
                 */
                status?: string;
                /**
                 * Format: 2019-11-30T20:33:44+02:00
                 * @description Operation request moment.
                 */
                creationDate?: string;
                /**
                 * Format: 2019-11-30T22:33:44+02:00
                 * @description Operation ending moment.
                 */
                eventDate?: string;
                details?: {
                    /** @description Order identifier. */
                    orderId?: string;
                    /** @description External order identifier. */
                    extOrderId?: string;
                    /** @description Refund identifier. */
                    refundId?: string;
                    /** @description External refund identifier. */
                    extRefundId?: string;
                    /** @description Order elements. */
                    counterparties?: {
                        /** @description Buyer identifier. */
                        extCustomerId?: string;
                        /** @description Buyer name. */
                        name?: string;
                        /** @description Buyer email. */
                        email?: string;
                    };
                    funds?: Record<string, never>[];
                };
            }[];
            pageResponse?: {
                /** @description Total number of records found. */
                records?: string;
                /** @description Number of returned operations. */
                size?: string;
                /** @description Page count. */
                pageCount?: string;
            };
        };
        PAYOUT: {
            /** @description List of operations. */
            operations?: {
                /**
                 * @description Operation type.
                 * @example PAYOUT
                 * @enum {string}
                 */
                type?: "PAYMENT_SENT" | "PAYMENT_RECEIVED" | "PAYOUT" | "REFUND_SENT" | "REFUND_RECEIVED" | "RETURN" | "ADMIN_TRANSFER_SENT" | "ADMIN_TRANSFER_RECEIVED" | "FEE_TRANSFER_SENT" | "FEE_TRANSFER_RECEIVED" | "CHARGEBACK" | "ADMIN_CORRECTION";
                /** @description Amount (of order, refund, payout). */
                amount?: string;
                /**
                 * @description Currency code according to ISO-4217.
                 * @example PLN
                 */
                currencyCode?: string;
                /** @description Operation description. */
                description?: string;
                /**
                 * @description Operation status.
                 * @example COMPLETED
                 */
                status?: string;
                /**
                 * Format: 2019-11-30T20:33:44+02:00
                 * @description Operation request moment.
                 */
                creationDate?: string;
                /**
                 * Format: 2019-11-30T22:33:44+02:00
                 * @description Operation ending moment.
                 */
                eventDate?: string;
                details?: {
                    /** @description Payout identifier */
                    payoutId?: string;
                    /** @description External payout identifier. */
                    extPayoutId?: string;
                    /** @description The account to which the payout was made. */
                    accountNumber?: string;
                    funds?: Record<string, never>[];
                };
            }[];
            pageResponse?: {
                /** @description Total number of records found. */
                records?: string;
                /** @description Number of returned operations. */
                size?: string;
                /** @description Page count. */
                pageCount?: string;
            };
        };
        RETURN: {
            /** @description List of operations. */
            operations?: {
                /**
                 * @description Operation type.
                 * @example RETURN
                 * @enum {string}
                 */
                type?: "PAYMENT_SENT" | "PAYMENT_RECEIVED" | "PAYOUT" | "REFUND_SENT" | "REFUND_RECEIVED" | "RETURN" | "ADMIN_TRANSFER_SENT" | "ADMIN_TRANSFER_RECEIVED" | "FEE_TRANSFER_SENT" | "FEE_TRANSFER_RECEIVED" | "CHARGEBACK" | "ADMIN_CORRECTION";
                /** @description Amount (of order, refund, payout). */
                amount?: string;
                /**
                 * @description Currency code according to ISO-4217.
                 * @example PLN
                 */
                currencyCode?: string;
                /** @description Operation description. */
                description?: string;
                /**
                 * @description Operation status.
                 * @example COMPLETED
                 */
                status?: string;
                /**
                 * Format: 2019-11-30T20:33:44+02:00
                 * @description Operation request moment.
                 */
                creationDate?: string;
                /**
                 * Format: 2019-11-30T22:33:44+02:00
                 * @description Operation ending moment.
                 */
                eventDate?: string;
                details?: {
                    /** @description Payout identifier */
                    payoutId?: string;
                    /** @description External payout identifier. */
                    extPayoutId?: string;
                    funds?: Record<string, never>[];
                };
            }[];
            pageResponse?: {
                /** @description Total number of records found. */
                records?: string;
                /** @description Number of returned operations. */
                size?: string;
                /** @description Page count. */
                pageCount?: string;
            };
        };
        CHARGEBACK: {
            /** @description List of operations. */
            operations?: {
                /**
                 * @description Operation type.
                 * @example CHARGEBACK
                 * @enum {string}
                 */
                type?: "PAYMENT_SENT" | "PAYMENT_RECEIVED" | "PAYOUT" | "REFUND_SENT" | "REFUND_RECEIVED" | "RETURN" | "ADMIN_TRANSFER_SENT" | "ADMIN_TRANSFER_RECEIVED" | "FEE_TRANSFER_SENT" | "FEE_TRANSFER_RECEIVED" | "CHARGEBACK" | "ADMIN_CORRECTION";
                /** @description Amount (of order, refund, payout). */
                amount?: string;
                /**
                 * @description Currency code according to ISO-4217.
                 * @example PLN
                 */
                currencyCode?: string;
                /** @description Operation description. */
                description?: string;
                /**
                 * @description Operation status.
                 * @example COMPLETED
                 */
                status?: string;
                /**
                 * Format: 2019-11-30T20:33:44+02:00
                 * @description Operation request moment.
                 */
                creationDate?: string;
                /**
                 * Format: 2019-11-30T22:33:44+02:00
                 * @description Operation ending moment.
                 */
                eventDate?: string;
                details?: {
                    /** @description Correction identifier */
                    correctionId?: string;
                    funds?: Record<string, never>[];
                };
            }[];
            pageResponse?: {
                /** @description Total number of records found. */
                records?: string;
                /** @description Number of returned operations. */
                size?: string;
                /** @description Page count. */
                pageCount?: string;
            };
        };
        ADMIN_CORRECTION: {
            /** @description List of operations. */
            operations?: {
                /**
                 * @description Operation type.
                 * @example ADMIN_CORRECTION
                 * @enum {string}
                 */
                type?: "PAYMENT_SENT" | "PAYMENT_RECEIVED" | "PAYOUT" | "REFUND_SENT" | "REFUND_RECEIVED" | "RETURN" | "ADMIN_TRANSFER_SENT" | "ADMIN_TRANSFER_RECEIVED" | "FEE_TRANSFER_SENT" | "FEE_TRANSFER_RECEIVED" | "CHARGEBACK" | "ADMIN_CORRECTION";
                /** @description Amount (of order, refund, payout). */
                amount?: string;
                /**
                 * @description Currency code according to ISO-4217.
                 * @example PLN
                 */
                currencyCode?: string;
                /** @description Operation description. */
                description?: string;
                /**
                 * @description Operation status.
                 * @example COMPLETED
                 */
                status?: string;
                /**
                 * Format: 2019-11-30T20:33:44+02:00
                 * @description Operation request moment.
                 */
                creationDate?: string;
                /**
                 * Format: 2019-11-30T22:33:44+02:00
                 * @description Operation ending moment.
                 */
                eventDate?: string;
                details?: {
                    /** @description Correction identifier */
                    correctionId?: string;
                    funds?: Record<string, never>[];
                };
            }[];
            pageResponse?: {
                /** @description Total number of records found. */
                records?: string;
                /** @description Number of returned operations. */
                size?: string;
                /** @description Page count. */
                pageCount?: string;
            };
        };
        /** @description Submerchant's data (if submerchant is a company). */
        CompanyData: {
            /**
             * @description Unique id of the verification provided by PayU.
             * @example aZx65uY
             */
            verificationId: string;
            /**
             * @description Unique id of seller (submerchant) given by marketplace side. This id must be constant for every verification concerning the same (submerchant).
             * @example seller_1"
             */
            sellerId: string;
            /**
             * @description Contact email.
             * @example company@test.com
             */
            email: string;
            /**
             * @description Contact phone.
             * @example 111222333
             */
            phone?: string;
            /**
             * Format: no spaces, eg. 1122334455
             * @description Tax id.
             * @example 1122334455
             */
            taxId: string;
            /**
             * @description Name of the company.
             * @example Company 1
             */
            companyName: string;
            /**
             * @description <b>FOREIGN_COMPANY</b> type has been deprecated.
             * @example CIVIL_LAW_PARTNERSHIP
             * @enum {string}
             */
            legalForm: "AGENCY_OF_FOREIGN_COMPANY" | "ASSOCIATION" | "CHURCH_LEGAL_PERSON" | "CIVIL_LAW_PARTNERSHIP" | "COOPERATIVE" | "EDUCATIONAL_INSTITUTION" | "FOUNDATION" | "GENERAL_PARTNERSHIP" | "JOINT_STOCK_COMPANY" | "LIMITED_JOINT_STOCK_PARTNERSHIP" | "LIMITED_LIABILITY_COMPANY" | "LIMITED_LIABILITY_PARTNERSHIP" | "LIMITED_PARTNERSHIP" | "LOCAL_GOVERNMENT_UNIT" | "PRIVATE_PERSON" | "PROFESSIONAL_PARTNERSHIP" | "LOCAL_GOVERNMENT_CULTURE_INSTITUTION" | "RESEARCH_INSTITUTE" | "SOLE_TRADER" | "OTHER";
            /** @description Code relating to the legal form. For more information see the site of the <b><a href='https://stat.gov.pl/metainformacje/slownik-pojec/pojecia-stosowane-w-statystyce-publicznej/97,pojecie.html' target='_blank'>Główny Urząd Statystyczny</a></b>. */
            gusCode?: string;
            /** @description Company registry number (eg REGON in Poland). */
            registryNumber?: string;
            /**
             * Format: YYYY-MM-DD
             * @description Company registration date in the registries.
             * @example 2019-07-07
             */
            registrationDate?: string;
            /** @description Address of the company. */
            address: {
                /**
                 * @description Street with building and apartment number. <b>Required for full verification</b>.
                 * @example Grunwaldzka 186
                 */
                street?: string;
                /**
                 * @description Company's address zipcode. <b>Required for full verification</b>.
                 * @example 60-166
                 */
                zipcode?: string;
                /**
                 * @description <b>Required for full verification</b>.
                 * @example Poznan
                 */
                city?: string;
                /**
                 * @description Two letter ISO country code.
                 * @example PL
                 */
                country: string;
            };
            /**
             * @description Information if the account was cloned for the same seller form the already exiting and verified one. Used when marketplace allows the account cloning operation.
             * @example false
             * @enum {string}
             */
            isAccountCloned?: "true" | "false";
        };
        /** @description Submerchant's data (if submerchant is a private person). */
        PrivatePerson: {
            /**
             * @description Unique id of the verification provided by PayU.
             * @example BZx65uYW
             */
            verificationId: string;
            /**
             * @description Unique id of seller (submerchant) given by marketplace side. This id must be constant for every verification concerning the same (submerchant).
             * @example seller_2"
             */
            sellerId: string;
            /**
             * @description Contact email.
             * @example test@test.com
             */
            email: string;
            /**
             * @description Contact phone.
             * @example 111222333
             */
            phone?: string;
            /**
             * Format: should be empty for private person
             * @description Tax id. <b>Should be empty for private person</b>.
             * @example
             */
            taxId?: string;
            /**
             * @description First name of the seller.
             * @example Jan
             */
            name: string;
            /**
             * @description Last name of the seller.
             * @example Kowalski
             */
            surname: string;
            /**
             * @description <b>FOREIGN_COMPANY</b> type has been deprecated.
             * @example PRIVATE_PERSON
             * @enum {string}
             */
            legalForm: "AGENCY_OF_FOREIGN_COMPANY" | "ASSOCIATION" | "CHURCH_LEGAL_PERSON" | "CIVIL_LAW_PARTNERSHIP" | "COOPERATIVE" | "EDUCATIONAL_INSTITUTION" | "FOUNDATION" | "GENERAL_PARTNERSHIP" | "JOINT_STOCK_COMPANY" | "LIMITED_JOINT_STOCK_PARTNERSHIP" | "LIMITED_LIABILITY_COMPANY" | "LIMITED_LIABILITY_PARTNERSHIP" | "LIMITED_PARTNERSHIP" | "LOCAL_GOVERNMENT_UNIT" | "PRIVATE_PERSON" | "PROFESSIONAL_PARTNERSHIP" | "LOCAL_GOVERNMENT_CULTURE_INSTITUTION" | "RESEARCH_INSTITUTE" | "SOLE_TRADER" | "OTHER";
            /**
             * @description National, personal identification number e.g. PESEL in Poland. <b>Required for private persons for full verification Not required for basic data</b>.
             * @example 90112322330
             */
            personalIdentificationNumber?: string;
            /**
             * Format: YYYY-MM-DD
             * @example 1988-10-12
             */
            dateOfBirth: string;
            /**
             * @description Company registry number (eg REGON in Poland). <b>Should be empty for private person</b>.
             * @example
             */
            registryNumber?: string;
            /** @description Address of the private person. */
            address: {
                /**
                 * @description Street with building and apartment number. <b>Required for full verification</b>.
                 * @example Grunwaldzka 186
                 */
                street?: string;
                /**
                 * @description Private person's address zipcode. <b>Required for full verification</b>.
                 * @example 60-166
                 */
                zipcode?: string;
                /**
                 * @description <b>Required for full verification</b>.
                 * @example Poznan
                 */
                city?: string;
                /**
                 * @description Two letter ISO country code.
                 * @example PL
                 */
                country: string;
            };
            /**
             * @description Information if the account was cloned for the same seller form the already exiting and verified one. Used when marketplace allows the account cloning operation.
             * @example false
             * @enum {string}
             */
            isAccountCloned?: "true" | "false";
        };
        PayoutWithVerificationTransfer: {
            /**
             * @description Id of the bank account details assigned by marketplace.
             * @example 01102020
             */
            bankDataId: string;
            /**
             * @description Id of verification in context of which data are provided.
             * @example verification-123
             */
            verificationId: string;
            /**
             * Format: IBAN
             * @description Bank account number declared for withdrawals by submerchant.
             * @example PL1122334455667788991010111223345
             */
            accountNumberRequested: string;
            /**
             * @description Flag informing that this bank account for payouts should be verified on base of bank document. **It must be set to true when the method used is "BANK_STATEMENT"**.
             * @example true
             * @enum {string}
             */
            hasDocument?: true | false;
            /**
             * @description Type of verification used for the provided payout details verification. Different for each verification type:
             *     * **LIAN_LIAN** - special type for Chinese submerchants,
             *     * **PINGPONG** - special type for Chinese submerchants,
             *     * **OFX** - special type for Chinese submerchants,
             *     * **BANK_STATEMENT** - used if all data are present on the document (**`hasDocument` must be true**),
             *     * **BANK_TRANSFER**,
             *     * **NO_VERIFICATION_NEEDED** - used if the provided bank account number was not yet verified by 3rd party but it doesn't have to be verified at the time of providing the bank details. It is used for the occasional transaction process when the bank account number is provided at the beginning of the process.
             * @example BANK_STATEMENT
             * @enum {string}
             */
            payoutDataVerificationType: "LIAN_LIAN" | "PINGPONG" | "OFX" | "BANK_STATEMENT" | "BANK_TRANSFER" | "NO_VERIFICATION_NEEDED";
            /**
             * @description Foreign Transfer Indicator. Has to be `true` for all cross-border payouts and payouts in EUR.
             *
             *     **For domestic transfers set this parameter to `false`, specifically**:
             *
             *     - Payouts in CZK (Czech Koruna) to an account held in the Czech Republic.
             *     - Payouts in PLN (Polish Złoty) to an account held in Poland.
             * @example false
             * @enum {string}
             */
            foreign: true | false;
            /**
             * @description Have to be indicated in request with declared payouts data. Payouts data need to be declared in 72 hours from above request/response.
             * @example 5f7007da-8e05-4f0f-9503-05c053034bde
             */
            verificationTransferId: string;
            /**
             * @description parameter indicating whether the bank account number was already verified e.g. by another provider. If set to **false** and the verification type is other than "NO_VERIFICATION_NEEDED" PayU must verify the bank account details.
             * @example false
             */
            verified: string;
        };
        PayoutWithoutVerificationTransfer: {
            /**
             * @description Id of the bank account details assigned by marketplace.
             * @example 01102020
             */
            bankDataId: string;
            /**
             * @description Id of verification in context of which data are provided.
             * @example verification-123
             */
            verificationId: string;
            /**
             * Format: IBAN
             * @description Bank account number declared for withdrawals by submerchant.
             * @example PL1122334455667788991010111223345
             */
            accountNumberRequested: string;
            /**
             * @description Flag informing that this bank account for payouts should be verified on base of bank document. **It must be set to true when the method used is "BANK_STATEMENT**".
             * @example true
             * @enum {string}
             */
            hasDocument?: true | false;
            /**
             * @description Standard format of Bank Identifier Code.
             * @example BREXPLPW
             */
            swiftCode?: string;
            /**
             * @description Bank address.
             * @example Schule Str. 23 60-000 Berlin
             */
            bankAddress?: string;
            /**
             * @description Bank country. **Required for foreign bank account**.
             * @example DE
             */
            bankCountry?: string;
            /**
             * @description Type of verification used for the provided payout details verification. Different for each verification type:
             *     * **LIAN_LIAN** - special type for Chinese submerchants,
             *     * **PINGPONG** - special type for Chinese submerchants,
             *     * **OFX** - special type for Chinese submerchants,
             *     * **BANK_STATEMENT** - used if all data are present on the document (**`hasDocument` must be true**),
             *     * **BANK_TRANSFER**,
             *     * **NO_VERIFICATION_NEEDED** - used if the provided bank account number was not yet verified by 3rd party but it doesn't have to be verified at the time of providing the bank details. It is used for the occasional transaction process when the bank account number is provided at the beginning of the process.
             * @example BANK_STATEMENT
             * @enum {string}
             */
            payoutDataVerificationType: "LIAN_LIAN" | "PINGPONG" | "OFX" | "BANK_STATEMENT" | "BANK_TRANSFER" | "NO_VERIFICATION_NEEDED";
            /** @description Details from bank statement. */
            statementData?: {
                /** @example DE84074749817492314 */
                accountNumberFromBank?: string;
                /**
                 * @description Name of the account owner from bank transfer.
                 * @example Marian Brotchen
                 */
                ownerName: string;
                address: {
                    /**
                     * @description Street name.
                     * @example Schule Str. 23
                     */
                    street?: string;
                    /**
                     * @description Zipcode
                     * @example 60-000
                     */
                    zipcode?: string;
                    /**
                     * @description City name.
                     * @example Berlin
                     */
                    city?: string;
                    /**
                     * Format: ISO Country Code
                     * @description Country code.
                     * @example DE
                     */
                    country?: string;
                };
            };
            /**
             * @description Foreign Transfer Indicator. Has to be `true` for all cross-border payouts and payouts in EUR.
             *
             *     **For domestic transfers set this parameter to `false`, specifically**:
             *
             *     - Payouts in CZK (Czech Koruna) to an account held in the Czech Republic.
             *     - Payouts in PLN (Polish Złoty) to an account held in Poland.
             * @example false
             * @enum {string}
             */
            foreign: true | false;
            /**
             * @description parameter indicating whether the bank account number was already verified e.g. by another provider. If set to **false** and the verification type is other than "NO_VERIFICATION_NEEDED" PayU must verify the bank account details.
             * @example false
             */
            verified: string;
        };
        PayoutBankStatement: {
            /**
             * @description Id of the bank account details assigned by marketplace.
             * @example 01102020
             */
            bankDataId: string;
            /**
             * @description Id of verification in context of which data are provided.
             * @example verification-123
             */
            verificationId: string;
            /**
             * Format: IBAN
             * @description Bank account number declared for withdrawals by submerchant.
             * @example PL1122334455667788991010111223345
             */
            accountNumberRequested: string;
            /**
             * @description Flag informing that this bank account for payouts should be verified on base of bank document. **It must be set to true when the method used is "BANK_STATEMENT**".
             * @example true
             * @enum {string}
             */
            hasDocument: true | false;
            /**
             * @description Type of verification used for the provided payout details verification. Different for each verification type:
             *     * **LIAN_LIAN** - special type for Chinese submerchants,
             *     * **PINGPONG** - special type for Chinese submerchants,
             *     * **OFX** - special type for Chinese submerchants,
             *     * **BANK_STATEMENT** - used if all data are present on the document (**`hasDocument` must be true**),
             *     * **BANK_TRANSFER**,
             *     * **NO_VERIFICATION_NEEDED** - used if the provided bank account number was not yet verified by 3rd party but it doesn't have to be verified at the time of providing the bank details. It is used for the occasional transaction process when the bank account number is provided at the beginning of the process.
             * @example BANK_STATEMENT
             * @enum {string}
             */
            payoutDataVerificationType: "LIAN_LIAN" | "PINGPONG" | "OFX" | "BANK_STATEMENT" | "BANK_TRANSFER" | "NO_VERIFICATION_NEEDED";
            /**
             * @description Foreign Transfer Indicator. Has to be `true` for all cross-border payouts and payouts in EUR.
             *
             *     **For domestic transfers set this parameter to `false`, specifically**:
             *
             *     - Payouts in CZK (Czech Koruna) to an account held in the Czech Republic.
             *     - Payouts in PLN (Polish Złoty) to an account held in Poland.
             * @example false
             * @enum {string}
             */
            foreign: true | false;
            /**
             * @description parameter indicating whether the bank account number was already verified e.g. by another provider. If set to **false** and the verification type is other than "NO_VERIFICATION_NEEDED" PayU must verify the bank account details.
             * @example false
             */
            verified: string;
        };
        Card: {
            /**
             * @description Array of enumerated values: `Card`, `PBL`. Both can be used at the same time - minimum one is required.
             * @example [
             *       "Card"
             *     ]
             */
            payTypeCategories?: string[];
            /** @description Id assigned by the Payment Facilitator. */
            externalId: string;
            /** @description Notifications regarding submerchant status change will be sent to address provided in this field. */
            notifyUrl: string;
            /** @description Full legal (registration) name. */
            legalName: string;
            /** @description "Doing business as" name, usually simplified website address which can be recognized by customer (e.g. when displayed on card statement). */
            dbaName: string;
            /** @description Legal address object. */
            address: {
                /** @description Legal address street including house/apartment number (if applicable). */
                street: string;
                /** @description Legal address city. */
                city: string;
                /** @description Legal address postal code. */
                postalCode: string;
                /** @description Legal address country code. Must be a valid ISO 3166-1 two-letter code. */
                countryCode: string;
            };
            /** @description Contact phone number. */
            phone: string;
            /** @description A valid URL address of merchant's website. */
            websiteUrl: string;
            /** @description Accurate Merchant Category Code established during KYC process by the PF. */
            mcc: number;
            /**
             * @description Risk class assigned by Payment Facilitator (basing on requirements provided by PayU).
             * @enum {string}
             */
            riskClass: "LOW" | "NORMAL" | "HIGH";
            /** @description Array of either principals or enterprise owners (depends on legal form). Minimum one is required. */
            representatives: {
                /** @description Representative's name. */
                name: string;
                /** @description Representative's phone number. */
                phone: string;
            }[];
            /**
             * @description Dictionary value - legal entity type. Check dictionaries for <a href="/europe/docs/collaboration/referral-program/#firm-types">specific origin</a>.
             * @enum {string}
             */
            legalForm: "FU" | "FZ" | "IB" | "JST" | "KOP" | "PO" | "PP" | "PPZ" | "PRPA" | "SA" | "SC" | "SD" | "SIK" | "SJ" | "SK" | "SO" | "SP" | "SPOL" | "ST";
            /** @description Tax identification (e.g. NIP in Poland) or business identification (e.g. IČ in Czechia). */
            taxId: string;
            /**
             * Format: yyyy-mm-dd
             * @description Date when PF signed agreement with the submerchant (required by Visa for reporting purposes).
             */
            agreementDate: string;
        };
        /** Card, PBL */
        CardPbl: {
            /**
             * @description Array of enumerated values: `Card`, `PBL`. Both can be used at the same time - minimum one is required.
             * @example [
             *       "Card",
             *       "PBL"
             *     ]
             */
            payTypeCategories?: string[];
            /** @description Id assigned by the Payment Facilitator. */
            externalId: string;
            /** @description Notifications regarding submerchant status change will be sent to address provided in this field. */
            notifyUrl: string;
            /** @description Full legal (registration) name. */
            legalName: string;
            /** @description "Doing business as" name, usually simplified website address which can be recognized by customer (e.g. when displayed on card statement). */
            dbaName: string;
            /** @description Legal address object. */
            address: {
                /** @description Legal address street including house/apartment number (if applicable). */
                street: string;
                /** @description Legal address city. */
                city: string;
                /** @description Legal address postal code. */
                postalCode: string;
                /** @description Legal address country code. Must be a valid ISO 3166-1 two-letter code. */
                countryCode: string;
            };
            /** @description Contact phone number. */
            phone: string;
            /** @description A valid URL address of merchant's website. */
            websiteUrl: string;
            /** @description Accurate Merchant Category Code established during KYC process by the PF. */
            mcc: number;
            /**
             * @description Risk class assigned by Payment Facilitator (basing on requirements provided by PayU).
             * @enum {string}
             */
            riskClass: "LOW" | "NORMAL" | "HIGH";
            /** @description Array of either principals or enterprise owners (depends on legal form). Minimum one is required. */
            representatives: {
                /** @description Representative's name. */
                name: string;
                /** @description Representative's phone number. */
                phone: string;
            }[];
            /**
             * @description Dictionary value - legal entity type. Check dictionaries for <a href="/europe/docs/collaboration/referral-program/#firm-types">specific origin</a>.
             * @enum {string}
             */
            legalForm: "FU" | "FZ" | "IB" | "JST" | "KOP" | "PO" | "PP" | "PPZ" | "PRPA" | "SA" | "SC" | "SD" | "SIK" | "SJ" | "SK" | "SO" | "SP" | "SPOL" | "ST";
            /** @description Tax identification (e.g. NIP in Poland) or business identification (e.g. IČ in Czechia). */
            taxId: string;
            /**
             * Format: yyyy-mm-dd
             * @description Date when PF signed agreement with the submerchant (required by Visa for reporting purposes).
             */
            agreementDate: string;
        };
        /** PBL */
        Pbl: {
            /**
             * @description Array of enumerated values: `Card`, `PBL`. Both can be used at the same time - minimum one is required.
             * @example [
             *       "PBL"
             *     ]
             */
            payTypeCategories?: string[];
            /** @description Id assigned by the Payment Facilitator. */
            externalId: string;
            /** @description Notifications regarding submerchant status change will be sent to address provided in this field. */
            notifyUrl: string;
            /** @description Full legal (registration) name. */
            legalName: string;
            /** @description "Doing business as" name, usually simplified website address which can be recognized by customer (e.g. when displayed on card statement). */
            dbaName: string;
            /** @description Legal address object. */
            address: {
                /** @description Legal address street including house/apartment number (if applicable). */
                street: string;
                /** @description Legal address city. */
                city: string;
                /** @description Legal address postal code. */
                postalCode: string;
                /** @description Legal address country code. Must be a valid ISO 3166-1 two-letter code. */
                countryCode: string;
            };
            /** @description Contact phone number. */
            phone?: string;
            /** @description A valid URL address of merchant's website. */
            websiteUrl: string;
            /** @description Accurate Merchant Category Code established during KYC process by the PF. */
            mcc: number;
            /**
             * @description Risk class assigned by Payment Facilitator (basing on requirements provided by PayU).
             * @enum {string}
             */
            riskClass?: "LOW" | "NORMAL" | "HIGH";
            /** @description Array of either principals or enterprise owners (depends on legal form). Minimum one is required. */
            representatives?: {
                /** @description Representative's name. */
                name: string;
                /** @description Representative's phone number. */
                phone: string;
            }[];
            /**
             * @description Dictionary value - legal entity type. Check dictionaries for <a href="/europe/docs/collaboration/referral-program/#firm-types">specific origin</a>.
             * @enum {string}
             */
            legalForm?: "FU" | "FZ" | "IB" | "JST" | "KOP" | "PO" | "PP" | "PPZ" | "PRPA" | "SA" | "SC" | "SD" | "SIK" | "SJ" | "SK" | "SO" | "SP" | "SPOL" | "ST";
            /** @description Tax identification (e.g. NIP in Poland) or business identification (e.g. IČ in Czechia). */
            taxId: string;
            /**
             * Format: yyyy-mm-dd
             * @description Date when PF signed agreement with the submerchant (required by Visa for reporting purposes).
             */
            agreementDate?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    oauth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["ClientCredentials"] | components["schemas"]["TrustedMerchant"] | components["schemas"]["Partner"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * Format: uuid
                         * @description Token used for authentication of API calls.
                         */
                        access_token?: string;
                        /** @enum {string} */
                        token_type?: "bearer";
                        /** Format: uuid */
                        refresh_token?: string;
                        /**
                         * @description Token expiration time (in seconds).
                         * @enum {integer}
                         */
                        expires_in?: 43199;
                        /**
                         * @description Token authentication mode.
                         * @enum {string}
                         */
                        grant_type?: "client_credentials" | "trusted_merchant";
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Cause of the error. */
                        error: string;
                        /** @description Error description. */
                        error_description: string;
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Cause of the error. */
                        error: string;
                        /** @description Error description. */
                        error_description: string;
                    };
                };
            };
        };
    };
    "retrieve-payment-methods": {
        parameters: {
            query?: {
                /**
                 * @description Language code, ISO-639-1 compliant, determins language of description in <code>name</code> field
                 * @example {
                 *       "lang": "pl"
                 *     }
                 */
                lang?: string;
            };
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        blikTokens?: components["schemas"]["blikTokens"];
                        cardTokens?: components["schemas"]["cardTokens"];
                        payByLinks?: components["schemas"]["payByLinks"];
                        status?: {
                            /** @enum {string} */
                            statusCode?: "SUCCESS";
                        };
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["401"];
                };
            };
        };
    };
    "create-an-order": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Address for redirecting the customer after payment is commenced.
                     * @example www.example.com/path
                     */
                    continueUrl?: string;
                    /**
                     * @description The address for sending notifications
                     * @example https://your.eshop.com/notify
                     */
                    notifyUrl?: string;
                    /**
                     * @description Payer's IP address. Value is accepted in following formats:<ul> <li> **IPv4** - address represented in the dotted decimal format of 4 sets of decimal numbers separated by dots. The decimal number in each and every set is in the range 0 - 255. Example: 1.12.123.255.</li> <li> **IPv6** - address represented as eight groups of four hexadecimal digits, each group representing 16 bits (two octets). The groups are separated by colons (:). Example: 2011:0db8:85a3:0101:0101:8a2e:0370:7334.</li></ul>
                     * @example 127.0.0.1
                     * @example 127.0.0.2
                     * @example 8d33:56b2:24aa:b822:9b2f:1db7:c21d:04e1
                     */
                    customerIp: string;
                    /**
                     * @description Point of sale ID.
                     * @example 140332
                     * @example 145227
                     */
                    merchantPosId: string;
                    /** @description Description of the order. */
                    description: string;
                    /** @description Additional description of the order. */
                    additionalDescription?: string;
                    /** @description Order/Payment description visible for Buyer on the PayU payment page. */
                    visibleDescription?: string;
                    /** @description Payment recipient name followed by payment description (order ID, ticket number etc) visible on card statement. The name should be easy to recognize by the cardholder. If field is not provided, static name configured by PayU will be used. */
                    statementDescription?: string;
                    /** @description ID of an order used in merchant system. Order identifier assigned by the merchant. It enables merchants to find a specific order in their system. This value must be unique within a single POS. */
                    extOrderId?: string;
                    /**
                     * @description Currency code compliant with ISO 4217 (e.g EUR).
                     * @example EUR
                     * @example PLN
                     * @example USD
                     */
                    currencyCode: string;
                    /**
                     * @description Total price of the order in pennies (e.g. 1000 is 10.00 EUR). Applies also to currencies without subunits (e.g. 1000 is 10 HUF).
                     * @example 1000
                     */
                    totalAmount: string;
                    /**
                     * @description Duration for the validity of an order (in seconds), during which time payment must be made. Default value 86400.
                     * @example 100000
                     */
                    validityTime?: string;
                    /**
                     * @description Information about party initializing order or a transaction with Buyer consent to save card token. "cardOnFile" parameter cannot be used with "recurring" parameter.
                     * @example FIRST
                     * @enum {string}
                     */
                    cardOnFile?: "FIRST" | "STANDARD_CARDHOLDER" | "STANDARD_MERCHANT";
                    /**
                     * @description Marks the order as recurring payment: <ul> <li><b>FIRST</b> - payment initialized by the card owner who agreed to save card for future use in recurring plan. You can expect full authentication (3D Secure and/or CVV). If you want to use multi-use token (TOKC_) later, you have to be confident, that first recurring payment was successful.</li> <li><b>STANDARD</b> - subsequent recurring payment (user is not present). This transaction has multi use token (TOKC_). You cannot use it if FIRST recurring payment failed.</li> </ul> <b><code>recurring</code> parameter cannot be used with <code>cardOnFile</code> parameter</b> .
                     * @example FIRST
                     * @enum {string}
                     */
                    recurring?: "FIRST" | "STANDARD";
                    donation?: components["schemas"]["donation"];
                    buyer?: components["schemas"]["buyer"];
                    shoppingCarts?: components["schemas"]["shoppingCarts"];
                    products: components["schemas"]["products"];
                    payMethods?: components["schemas"]["payMethods"];
                    mcpData?: components["schemas"]["mcpData"];
                    threeDsAuthentication?: components["schemas"]["threeDsAuthentication"];
                    credit?: components["schemas"]["credit"];
                    submerchant?: components["schemas"]["submerchant"];
                    settings?: components["schemas"]["settings"];
                    /**
                     * @description Hashed identifier of the user or its device.
                     * @example 3e9fae0b3e6003a4093358167bc1079e
                     */
                    deviceFingerprint?: string;
                };
            };
        };
        responses: {
            /** @description SUCCESS */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status?: {
                            statusCode?: string;
                            redirectUri?: string;
                            /** @example WZHF5FFDRJ140731GUEST000P01 */
                            orderId?: string;
                            /** @example true */
                            iframeAllowed?: boolean;
                            /**
                             * @example 3DS2
                             * @enum {string}
                             */
                            threeDsProtocolVersion?: "3DS2";
                            extOrderId?: string;
                            challengeParameters?: {
                                /** @example 0016f22b-f988-4358-b2c6-8917bba22037 */
                                threeDsServerTransactionId?: string;
                                /** @example d7c1ee99-9478-44a6-b1f2-391e29c6b340 */
                                acsTransID?: string;
                                /** @example 3DS_LOA_ACS_201_13579 */
                                acsReferenceNumber?: string;
                                /** @example c29tZUJhc2U2NGVuY29kZWRTdHJpbmc= */
                                acsSignedContent?: string;
                            };
                        };
                    };
                };
            };
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status?: {
                            /**
                             * @description Response code
                             * @example SUCCESS
                             */
                            statusCode?: string;
                            severity?: string;
                        };
                        /**
                         * @description Url redirection address with payment summary.
                         * @example https://merch-prod.snd.payu.com/pay/?orderId=WZHF5FFDRJ140731GUEST000P01&token=eyJhbGciOiJIUzI1NiJ9.eyJvcmRlcklkIjoiV1pIRjVGRkRSSjE0MDczMUdVRVNUMDAwUDAxIiwicG9zSWQiOiJhYmMxMjM0IiwiYXV0aG9yaXRpZXMiOlsiUk9MRV9DTElFTlQiXSwicGF5ZXJFbWFpbCI6InRlc3RAdGVzdC5jb20iLCJleHAiOjE2NzI3NjE4NjEsImlzcyI6IlBBWVUiLCJhdWQiOiJhcGktZ2F0ZXdheSIsInN1YiI6IlBheVUgc3ViamVjdCIsImp0aSI6IjYzMTA3M2Y0LThmMzgtNDNlZS1iOTc1LWVlNWIwZGI0ZWFiZSJ9.tBThoQDVgo9mpmh2AUDC5hkfecwtqO0L9LSCdXRYruk
                         */
                        redirectUri?: string;
                        /** @example true */
                        iframeAllowed?: boolean;
                        /** @enum {string} */
                        threeDsProtocolVersion?: "3DS2";
                        /**
                         * @description Order identifier given by PayU.
                         * @example WZHF5FFDRJ140731GUEST000P01
                         */
                        orderId?: string;
                        /**
                         * @description Order identifier given by merchant.
                         * @example my_ext_order_id
                         */
                        extOrderId?: string;
                        payMethods?: {
                            payMethod?: {
                                card?: {
                                    /**
                                     * @description Card number.
                                     * @example 4444333322221111
                                     */
                                    number?: string;
                                    /**
                                     * @description Card expiration month.
                                     * @example 9
                                     */
                                    expirationMonth?: number;
                                    /**
                                     * @description Card expiration year.
                                     * @example 2026
                                     */
                                    expirationYear?: number;
                                };
                                /** @enum {string} */
                                type?: "CARD_TOKEN";
                                /** @example TOKC_XATB7DF8ACXYTVQIPLWTVPFRKQE */
                                value?: string;
                            };
                        };
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["400"];
                };
            };
            /** @description Incorrect authentication. Check signature parameters and implementation of the signature algorithm. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["401"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["403"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["500"];
                };
            };
        };
    };
    "retrieve-an-order": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path: {
                /**
                 * @description Order ID generated by the PayU system
                 * @example WZHF5FFDRJ140731GUEST000P01
                 */
                orderId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Array of order objects. */
                        orders?: {
                            shippingMethod?: {
                                /**
                                 * @description Two-letter country code compliant with ISO-3166
                                 * @example PL
                                 */
                                country?: string;
                                /**
                                 * @description Shipping cost
                                 * @example 2000
                                 */
                                price?: string;
                                /**
                                 * @description Shipping method name
                                 * @example parcell
                                 */
                                name?: string;
                            };
                            /**
                             * @description Order ID generated by the PayU system.
                             * @example VVLR1HXK2S160929GUEST000P01
                             */
                            orderId?: string;
                            /**
                             * @description External order ID (assigned by the shop).
                             * @example 343242
                             */
                            extOrderId?: string;
                            /**
                             * @description Order creation timestamp.
                             * @example 2023-01-03T14:58:17.443+01:00
                             */
                            orderCreateDate?: string;
                            /**
                             * @description Address for sending notifications.
                             * @example http://localhost/OrderNotify/
                             */
                            notifyUrl?: string;
                            /**
                             * @description Customer's IP address. Note: 0.0.0.0 is not accepted.
                             * @example 127.0.0.1
                             */
                            customerIp?: string;
                            /**
                             * @description Point of sale ID.
                             * @example 145227
                             */
                            merchantPosId?: string;
                            /**
                             * @description Description for order.
                             * @example New Order
                             */
                            description?: string;
                            /**
                             * @description Additional description for order.
                             * @example New Order
                             */
                            additionalDescription?: string;
                            /**
                             * @description Duration for the validity of an order (in seconds), during which time payment must be made.
                             * @default 86400
                             */
                            validityTime: string;
                            /**
                             * @description Currency code compliant with ISO 4217.
                             * @example PLN
                             */
                            currencyCode?: string;
                            /**
                             * @description Total price of the order.
                             * @example 3200
                             */
                            totalAmount?: string;
                            buyer?: components["schemas"]["buyer"];
                            payMethod?: {
                                /** @example 20000 */
                                amount?: string;
                                /** @enum {string} */
                                type?: "PBL" | "CARD_TOKEN" | "PAYMENT_WALL" | "BLIK_AUTHORIZATION_CODE" | "BLIK_TOKEN";
                            };
                            products?: components["schemas"]["products"];
                            shoppingCarts?: components["schemas"]["shoppingCarts"];
                            /**
                             * @description Order status.
                             * @example COMPLETED
                             * @enum {string}
                             */
                            status?: "NEW" | "PENDING" | "WAITING_FOR_CONFIRMATION" | "COMPLETED" | "CANCELED";
                        }[];
                        properties?: components["schemas"]["properties"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["400"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["401"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["404"];
                };
            };
        };
    };
    "cancel-an-order": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path: {
                /**
                 * @description Order ID generated by the PayU system
                 * @example WZHF5FFDRJ140731GUEST000P01
                 */
                orderId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Order identifier in PayU's system.
                         * @example WZHF5FFDRJ140731GUEST000P01
                         */
                        orderId?: string;
                        /**
                         * @description Order identifier in merchant's system.
                         * @example 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                         */
                        extOrderId?: string;
                        status?: {
                            /**
                             * @description Status after update.
                             * @example SUCCESS
                             */
                            statusCode?: string;
                        };
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["400"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["401"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["403"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["404"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["500"];
                };
            };
        };
    };
    "capture-authorized-order": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path: {
                /**
                 * @description Order ID generated by the PayU system
                 * @example WZHF5FFDRJ140731GUEST000P01
                 */
                orderId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Full"] | components["schemas"]["Partial"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status?: {
                            /**
                             * @description Status after update.
                             * @example SUCCESS
                             */
                            statusCode?: string;
                            /**
                             * @description Status message.
                             * @example Status was updated
                             */
                            statusDesc?: string;
                        };
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["400"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["401"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["500"];
                };
            };
        };
    };
    "capture-authorized-order-deprecated": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path: {
                /**
                 * @description Order ID generated by the PayU system
                 * @example WZHF5FFDRJ140731GUEST000P01
                 */
                orderId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Identifier of the order you want to update.
                     * @example VVLR1HXK2S160929GUEST000P01
                     */
                    orderId: string;
                    /**
                     * @description Status of the order after update.
                     * @example COMPLETED
                     */
                    orderStatus: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status?: {
                            /**
                             * @description Status after update.
                             * @example SUCCESS
                             */
                            statusCode?: string;
                            /**
                             * @description Status message.
                             * @example Status was updated
                             */
                            statusDesc?: string;
                        };
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["400"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["401"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["500"];
                };
            };
        };
    };
    "retrieve-a-transaction": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path: {
                /**
                 * @description Order ID generated by the PayU system
                 * @example WZHF5FFDRJ140731GUEST000P01
                 */
                orderId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["card"] | components["schemas"]["pbl"] | components["schemas"]["blik"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["400"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["401"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["404"];
                };
            };
        };
    };
    "retrieve-shop-data": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path: {
                /**
                 * @description ShopId value generated by PayU assigned to Shop
                 * @example a1B2C3x
                 */
                shopId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description ShopId value generated by PayU assigned to Shop.
                         * @example a1B2C3x
                         */
                        shopId?: string;
                        /**
                         * @description Shop name assigned by Merchant.
                         * @example Test Shop
                         */
                        name?: string;
                        /**
                         * @description ISO 4217 currency code of currency in which Shop balance is kept.
                         * @example PLN
                         */
                        currencyCode?: string;
                        balance?: components["schemas"]["balance"];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status?: {
                            /** @example ERROR */
                            statusCode?: string;
                        };
                        /** @example {payment_summary_redirection_url} */
                        redirectUri?: string;
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        error_description?: string;
                    };
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status?: {
                            /** @description Error type. */
                            statusCode?: string;
                            severity?: string;
                            /** @description Error description. */
                            statusDesc?: string;
                        };
                    };
                };
            };
        };
    };
    "retrieve-all-refunds-for-the-specified-order": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path: {
                /**
                 * @description Order ID generated by the PayU system
                 * @example WZHF5FFDRJ140731GUEST000P01
                 */
                orderId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": [
                        components["schemas"]["refundRetrievePending"],
                        components["schemas"]["refundRetrieveCanceled"]
                    ];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status?: {
                            /** @description Error type. */
                            statusCode?: string;
                            severity?: string;
                            /** @description Error description. */
                            statusDesc?: string;
                        };
                    };
                };
            };
        };
    };
    "create-a-refund": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path: {
                /**
                 * @description Order ID generated by the PayU system
                 * @example WZGF5FFDRJ140731GUEST000P01
                 */
                orderId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Contains detailed information about a refund. */
                    refund: {
                        /**
                         * @description Refund description.
                         * @example Test refund
                         */
                        description: string;
                        /**
                         * @description Amount of the refund. If this is left blank, all funds will be returned to the buyer.
                         *
                         *     Specify prices using the **lowest currency unit**. For instance, in the case of PLN (Polish Złoty), the lowest currency unit is the penny, which equals 1/100 PLN. Therefore, if the price is 1000 in the lowest currency unit, it would be equivalent to 10 PLN. However, HUF (Hungarian Forint) is an exception to this rule. For HUF, you should multiply the amount by 100.
                         * @example 10000
                         */
                        amount?: string;
                        /**
                         * @description External refund ID.
                         * @example 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                         */
                        extRefundId?: string;
                        /**
                         * @description Currency code compliant with ISO 4217.
                         * @example PLN
                         */
                        currencyCode?: string;
                        /**
                         * @description Bank operation description.
                         * @example Bank transfer refund
                         */
                        bankDescription?: string;
                        /**
                         * @description Specifies the method by which the refund will be processed:<ul> <li><b>REFUND_PAYMENT_STANDARD</b> – The standard refund procedure.</li> <li><b>FAST</b> – An expedited refund process that may incur higher fees. <b>Available only to merchants operating through PayU GPO Romania</b>.</li> </ul>
                         * @default REFUND_PAYMENT_STANDARD
                         * @example REFUND_PAYMENT_STANDARD
                         * @enum {string}
                         */
                        type?: "REFUND_PAYMENT_STANDARD" | "FAST";
                    };
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description ID of refunded order.
                         * @example WZGF5FFDRJ140731GUEST000P01
                         */
                        orderId?: string;
                        /** @description Refund details. */
                        refund?: {
                            /**
                             * @description Refund identifier.
                             * @example 5000000142
                             */
                            refundId?: string;
                            /**
                             * @description Refund description
                             * @example Test refund
                             */
                            description?: string;
                            /**
                             * @description Amount of the refund. If this is left blank, all funds will be returned to the buyer.
                             * @example 10000
                             */
                            amount?: string;
                            /**
                             * @description External refund ID.
                             * @example 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                             */
                            extRefundId?: string;
                            /**
                             * @description Currency code compliant with ISO 4217.
                             * @example PLN
                             */
                            currencyCode?: string;
                            /**
                             * @description Bank operation description.
                             * @example Bank transfer refund
                             */
                            bankDescription?: string;
                            /**
                             * @description Date of refund creation.
                             * @example 2020-07-02T09:19:03.896+02:00
                             */
                            creationDateTime?: string;
                            /**
                             * @description Refund status code.
                             * @example PENDING
                             * @enum {string}
                             */
                            status?: "PENDING" | "CANCELED" | "FINALIZED";
                            /**
                             * @description Timestamp of the status.
                             * @example 2020-07-02T09:19:04.013+02:00
                             */
                            statusDatetime?: string;
                        };
                        status?: {
                            /**
                             * @description Status of the refund.
                             * @example SUCCESS
                             */
                            statusCode?: string;
                            /**
                             * @description Description og given status.
                             * @example Refund queued for processing
                             */
                            statusDesc?: string;
                        };
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["400"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["404"];
                };
            };
        };
    };
    "retrieve-specific-refund": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path: {
                /**
                 * @description Order ID generated by the PayU system
                 * @example WZHF5FFDRJ140731GUEST000P01
                 */
                orderId: string;
                /**
                 * @description Refund identifier in the PayU system.
                 * @example 5000000142
                 */
                refundId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["refundRetrieveFinalized"] | components["schemas"]["refundRetrievePending"] | components["schemas"]["refundRetrieveCanceled"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["404"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status?: {
                            /** @description Error type. */
                            statusCode?: string;
                            severity?: string;
                            /** @description Error description. */
                            statusDesc?: string;
                        };
                    };
                };
            };
        };
    };
    "create-a-payout": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        /** @description Parameters for creating payouts. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["StandardPayout"] | components["schemas"]["BankAccountPayout"] | components["schemas"]["CardPayout"] | components["schemas"]["MarketplacePayout"] | components["schemas"]["FxPayout"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        payout?: {
                            payoutId?: string;
                            extPayoutId?: string;
                            extCustomerId?: string;
                            /** @example 10000 */
                            amount?: Record<string, never>;
                            /** @example PLN */
                            currencyCode?: string;
                            /** @enum {string} */
                            status?: "PENDING" | "WAITING" | "CANCELLED" | "REALIZED";
                            fxData?: {
                                /** @example EUR */
                                currencyCode?: string;
                                /** @example 2500 */
                                amount?: Record<string, never>;
                                /** @example 0.25 */
                                rate?: Record<string, never>;
                                partnerId?: string;
                                tableId?: string;
                            };
                        };
                        status?: {
                            statusCode?: string;
                        };
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["400"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        error_description?: string;
                    };
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["403"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["404"];
                };
            };
        };
    };
    "retrieve-a-payout": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path: {
                /**
                 * @description Payout ID generated by the PayU system
                 * @example fefa25e021b14970bfac9ebfb20761dc
                 */
                payoutId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        payout?: {
                            payoutId?: string;
                            extPayoutId?: string;
                            /** @example 10000 */
                            amount?: Record<string, never>;
                            description?: string;
                            /** @enum {string} */
                            status?: "PENDING" | "WAITING" | "CANCELLED" | "REALIZED";
                            fxData?: {
                                currencyCode?: string;
                                /** @example 2500 */
                                amount?: Record<string, never>;
                                /** @example 0.25 */
                                rate?: Record<string, never>;
                                partnerId?: string;
                                tableId?: string;
                            };
                        };
                        status?: {
                            statusCode?: string;
                        };
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["400"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["401"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["403"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["404"];
                };
            };
        };
    };
    "delete-a-token": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token with <code>grant_type=trusted_merchant</code>.
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path: {
                /** @example TOKC_XATB7DF8ACXYTVQIPLWTVPFRKQE */
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description SUCCESS */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["400"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["401"];
                };
            };
        };
    };
    "retrieve-rate-table": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path: {
                /** @example 6283a549-8b1a-430d-8a62-eea64327440e */
                mcpPartnerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description rate table id (corresponds with mcpFxTableId in OrderCreateRequest)
                         * @example 802438
                         */
                        id?: string;
                        /**
                         * Format: 2017-06-27T20:20:00Z
                         * @description table validity time (always in UTC). New table should be retrieved right after the validity ends.
                         * @example 2023-01-02T20:18:00Z
                         */
                        validTo?: string;
                        /** @description Section containing pairs of chosen term currency and base currencies */
                        currencyPairs?: {
                            /**
                             * @description initial currency code - this is the currency in which the payer will be charged (card settlement currency) compliant with ISO 4217
                             * @example PLN
                             */
                            baseCurrency?: string;
                            /**
                             * @description exchange rate from base currency to term currency
                             * @example 0.23753
                             */
                            exchangeRate?: number;
                            /**
                             * @description final currency code - this is the currnecy of the shop at which the payment will be processed (currency set for the shop in the PayU system) compliant with ISO 4217
                             * @example USD
                             */
                            termCurrency?: string;
                        }[];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["400"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["401"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["404"];
                };
            };
        };
    };
    "retrieve-reference-rates": {
        parameters: {
            query: {
                /**
                 * @example {
                 *       "termCurrency": "PLN"
                 *     }
                 */
                termCurrency: string;
            };
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description reference rate table validity. You need to refresh the table daily
                         * @example 2023-01-03
                         */
                        effectiveDate?: string;
                        /** @description Section containing pairs of chosen term currency and base currencies */
                        fxRates?: {
                            /** @description initial currency - this is the currency in which the payer will be charged (card settlement currency) */
                            baseCurrency?: string;
                            /** @description final currency - this is the currnecy of the shop at which the payment will be processed (currency set for the shop in the PayU system) */
                            termCurrency?: string;
                            /**
                             * @description midrate to be used to calculate the percentage mark-up
                             * @example 3.141
                             */
                            midRate?: number;
                        }[];
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["401"];
                };
            };
        };
    };
    "retrieve-seller-status": {
        parameters: {
            query: {
                /**
                 * @description Currency code according to ISO-4217.
                 * @example PLN
                 */
                currencyCode: string;
            };
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path: {
                /** @description Submerchant identifier. */
                extCustomerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Submerchant status.
                         * @enum {string}
                         */
                        customVerificationStatus?: "Verified" | "NotVerified";
                        /** @description Name of the company. */
                        name?: string;
                        /** @description Company NIP. For companies registered abroad the field contains Tax ID or VAT UE. */
                        taxId?: string;
                        /** @description Regon number of the company */
                        regon?: string;
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["401"];
                };
            };
        };
    };
    "retrieve-seller-balance": {
        parameters: {
            query: {
                /**
                 * @description Currency code according to ISO-4217.
                 * @example PLN
                 */
                currencyCode: string;
            };
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path: {
                /** @description Submerchant identifier. */
                extCustomerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        balance?: {
                            /** @description Available funds. */
                            availableAmount?: string;
                            /** @description Total submerchant funds (including blocked funds) */
                            totalAmount?: string;
                        };
                        status?: {
                            /** @description Response Status */
                            statusCode?: string;
                        };
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["401"];
                };
            };
        };
    };
    "retrieve-seller-operation-history": {
        parameters: {
            query: {
                /** @description Currency code according to ISO-4217. <b>You can enter multiple values. Subsequent entries should be separated by a comma</b>. */
                currencyCode?: string;
                /** @description Operation type. <b>You can enter multiple values. Subsequent entries should be separated by a comma.</b> */
                type?: "PAYMENT_SENT" | "PAYMENT_RECEIVED" | "PAYOUT" | "REFUND_SENT" | "REFUND_RECEIVED" | "RETURN" | "ADMIN_TRANSFER_SENT" | "ADMIN_TRANSFER_RECEIVED" | "FEE_TRANSFER_SENT" | "FEE_TRANSFER_RECEIVED";
                /** @description Start of the search range for "eventDate". <b>Date must be url encoded.</b> */
                eventDateFrom: string;
                /** @description End of the search range for "eventDate". <b>Date must be url encoded.</b> */
                eventDateTo: string;
                /** @description Start of the search range for "creationDate". <b>Date must be url encoded.</b> */
                creationDateFrom?: string;
                /** @description End of the search range for "creationDate". <b>Date must be url encoded.</b> */
                creationDateTo?: string;
                /** @description Number of records per page. */
                limit?: string;
                /** @description Page number (indexing from 0). */
                offset?: string;
                /** @description Sorting field. Additional sign "<b>+</b>" or "<b>-</b>" before field name defines sorting order. <b>Default is ascending</b>. */
                sortBy?: "eventDate" | "creationDate" | "type" | "currencyCode";
            };
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path: {
                /** @description Submerchant identifier. */
                extCustomerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PAYMENT_RECEIVED"] | components["schemas"]["REFUND_SENT"] | components["schemas"]["PAYOUT"] | components["schemas"]["RETURN"] | components["schemas"]["CHARGEBACK"] | components["schemas"]["ADMIN_CORRECTION"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["401"];
                };
            };
        };
    };
    "transfer-funds-from-seller-to-marketplace-balance": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path: {
                /** @description Submerchant identifier. */
                extCustomerId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Transfer amount. */
                    amount?: number;
                    /**
                     * @description Currency code according to ISO-4217.
                     * @example PLN
                     */
                    currencyCode?: string;
                    /** @description Description of the operation. */
                    description?: string;
                    /** @description Unique transfer identifier for given marketplace. */
                    extTransferId?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Unique submerchant identifier. */
                        extCustomerId?: string;
                        /** @description Unique transfer identifier for given marketpalce. */
                        extTransferId?: string;
                        status?: {
                            /**
                             * @description Response status.
                             * @example SUCCESS
                             */
                            statusCode?: string;
                        };
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["401"];
                };
            };
        };
    };
    "transfer-funds-from-marketplace-to-seller-balance": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path: {
                /** @description Unique submerchant identifier. */
                extCustomerId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Transfer amount. */
                    amount?: number;
                    /**
                     * @description Currency code according to ISO-4217.
                     * @example PLN
                     */
                    currencyCode?: string;
                    /** @description Description of the operation. */
                    description?: string;
                    /** @description Unique transfer identifier for given marketplace. */
                    extTransferId?: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Unique submerchant identifier. */
                        extCustomerId?: string;
                        /** @description Unique transfer identifier for given marketpalce. */
                        extTransferId?: string;
                        status?: {
                            /**
                             * @description Response status.
                             * @example SUCCESS
                             */
                            statusCode?: string;
                        };
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["401"];
                };
            };
        };
    };
    "retrieve-marketplace-verification-advice": {
        parameters: {
            query: {
                /** @description Company tax id of a entity. <b>Required if you want to check a status of a company.</b> */
                companyTaxId: string;
                /** @description Personal identification number of individual. <b>Required if you want to check a status of a private person.</b> */
                pesonalIdentificationNumber: string;
            };
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Advised verify action. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description * **FULL_ONBOARDING_REQUIRED** - full boarding process required,
                         *     * **BANK_ACCOUNT_VERIFICATION_REQUIRED** -  only a verification transfer is required for verification purposes.
                         * @enum {string}
                         */
                        advice?: "FULL_ONBOARDING_REQUIRED" | "BANK_ACCOUNT_VERIFICATION_REQUIRED";
                    };
                };
            };
            /** @description Invalid input query values. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["400"];
                };
            };
            /** @description Marketplace not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["401"];
                };
            };
        };
    };
    "retrieve-marketplace-verification-status": {
        parameters: {
            query: {
                /**
                 * @description Value of the query `id` parameter is the same as the `verificationId`.
                 * @example aZl6Ja
                 */
                id: string;
            };
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Verification found. Http 200 will return body which will contain one of below statuses. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["200"];
                };
            };
            /** @description Verification not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["404"];
                };
            };
        };
    };
    "create-marketplace-verification": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Unique id of seller (submerchant) given by marketplace side. This id must be constant for every verification concerning the same seller (submerchant). */
                    sellerId: string;
                    /**
                     * @description Verification type. Possible values descriptions: <ul> <li><b>PAYOUT_ACCOUNT_DATA</b>- initialized by marketplace side. The verification with this type should contain the data of payout account and seller (submerchant). If this verification initializes seller in PayU then seller data are required. If it is just account update, then only account data are required.</li> <li><b>FULL</b> - verification which requires providing by seller all data for AML4 and payouts, typically initialized by marketplace side.</li> <li><b>UPDATE</b> - verification which requires providing by seller all data for AML4 and payouts, typically initialized by marketplace side.</li> <li><b>REVERIFICATION</b> - verification which requires providing by seller all data for AML4 and payouts, typically initialized by marketplace side.</li> <li><b>PERSONAL_ID_TAX_ID_CHANGE</b>- initialized by marketplace side. This allows to change PERSONAL_ID for private person or TAX_IDs for legal entity. Once the KYC verification process begins, the current account and payouts are blocked until verification is completed. If the process is interrupted (e.g. the company is unable to verify itself), PayU restores the old merchant account, thus unlocking the payouts on it.</li> <li><b>CONVERSION</b>- initialized by marketplace side. This allows to change PERSONAL_ID for private person or TAX_IDs for legal entity. Once the KYC verification process begins, the current account and payouts are blocked until verification is completed. If the process is interrupted (e.g. the company is unable to verify itself), PayU restores the old merchant account, thus unlocking the payouts on it.</li> </ul>
                     * @enum {string}
                     */
                    type?: "PAYOUT_ACCOUNT_DATA" | "FULL" | "UPDATE" | "REVERIFICATION" | "PERSONAL_ID_TAX_ID_CHANGE" | "CONVERSION";
                    overridePayouts?: boolean;
                };
            };
        };
        responses: {
            /** @description SUCCESS */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Unique id of the verification provided by PayU.
                         * @example aZl6Ja
                         */
                        verificationId?: string;
                        /**
                         * @description Current status of the verification:
                         *     * **WAITING_FOR_DATA** - status after initialization of the verification, when PayU is waiting for data or after exceeding transaction limits for the occasional transaction flow.
                         *     * **WAITING_FOR_VERIFICATION** - set when all the data were send to PayU (after complete).
                         *     * **REJECTED** - set when there are some errors in the provided data. These status is send with error codes.
                         *     * **POSITIVE** - final status for approved verification.
                         *     * **NEGATIVE** - final rejection status.
                         * @example WAITING_FOR_DATA
                         */
                        status?: string;
                        /** @example seller_27 */
                        sellerId?: string;
                    };
                };
            };
            /** @description Invalid input data. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["400"];
                };
            };
            /** @description Verification may be already in progress. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["409"];
                };
            };
        };
    };
    "add-sellers-data": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CompanyData"] | components["schemas"]["PrivatePerson"];
            };
        };
        responses: {
            /** @description Data accepted for further verification. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid input. Reason specified in content. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["400"];
                };
            };
            /** @description Verification not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["404"];
                };
            };
            /** @description Verification state does not allow operation. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["409"];
                };
            };
        };
    };
    "add-sellers-documents": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Id of verification in context of which data are provided. */
                    verificationId: string;
                    documentId: string;
                    /**
                     * @description Document types.
                     * @enum {string}
                     */
                    type?: "REGISTRY_DOCUMENT" | "BANK_ACCOUNT_AGREEMENT" | "INVOICE" | "UBO_STATEMENT" | "CIVIL_LAW_AGREEMENT" | "PROXY_DOCUMENT" | "OTHER_DOCUMENT";
                    /**
                     * Format: String[]
                     * @description List of file ids given in a response to the dataloading/files request. There can be many IDs in this field when one document contains many files.
                     */
                    files?: string[];
                    note?: string;
                    /**
                     * Format: String[]
                     * @description <code>fileId</code> of translation of documents (Polish or English documents do not need to be translated).
                     */
                    transactionFiles?: string[];
                };
            };
        };
        responses: {
            /** @description SUCCESS */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid input. Reason specified in content. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["400"];
                };
            };
            /** @description Verification not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["404"];
                };
            };
            /** @description Verification state does not allow operation. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["409"];
                };
            };
        };
    };
    "add-associates-data": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Unique id of the verification provided by PayU.
                     * @example aZx65uY
                     */
                    verificationId: string;
                    /**
                     * @description Associate id. Unique on seller level.
                     * @example dsada65
                     */
                    associateId: string;
                    /**
                     * @description Type of the associate.
                     * @enum {string}
                     */
                    associateType: "BENEFICIARY" | "REPRESENTATIVE";
                    /**
                     * @description Associate first name.
                     * @example Jan
                     */
                    associateName: string;
                    /**
                     * @description Associate last name.
                     * @example Kowalski
                     */
                    associateSurname: string;
                    /**
                     * Format: YYYY-MM-DD
                     * @description Associate date of birth. <b>Required for non-polish associates</b>.
                     * @example 1980-01-27
                     */
                    associateBirthDate?: string;
                    /**
                     * @description Unique associate identification number. PESEL in Poland. <b>Required for polish associates</b>.
                     * @example 90120789112
                     */
                    associateIdentityNumber?: string;
                    /**
                     * Format: ISO Country Code
                     * @description Two letter ISO country code.
                     * @example PL
                     */
                    associateCitizenship: string;
                    /**
                     * @description Two letter ISO country code.
                     * @example PL
                     */
                    associateCountryOfBirth?: string;
                    /**
                     * @example true
                     * @enum {string}
                     */
                    pepStatement?: "true" | "false";
                    /**
                     * @example true
                     * @enum {string}
                     */
                    verified?: "true" | "false";
                    /** @description Object containing Authologic data. */
                    externalVerificationData?: {
                        /**
                         * @description The type of verification that was used in Authologic.
                         * @enum {string}
                         */
                        externalVerificationType: "MOJEID_PL" | "MOJEID_CZ" | "BANKID_CZ" | "EDO" | "MYOBYWATEL" | "BIOMETRIC_VERIFICATION_OCR";
                        /**
                         * @description The identification number of the document.
                         * @example ABC123456
                         */
                        documentNumber: string;
                        /**
                         * @description The type of the document.
                         * @example ID_CARD
                         */
                        documentType: string;
                        /**
                         * Format: YYYY-MM-DD
                         * @description The expiry date of the document
                         * @example 2030-09-23
                         */
                        documentExpiryDate: string;
                        /**
                         * @description The identification number of the associate as stated in the document.
                         * @example 94091100007
                         */
                        identityNumber: string;
                        /**
                         * @description The nationality of the associate as stated in the document.
                         * @example PL
                         */
                        nationality: string;
                        /**
                         * Format: YYYY-MM-DD
                         * @description The date of birth of the associate as stated in the document.
                         * @example 2000-09-11
                         */
                        dateOfBirth: string;
                        /**
                         * @description The identification number of the second document.
                         * @example DFE123456
                         */
                        secondDocumentNumber: string;
                        /**
                         * @description The type of the second document.
                         * @example PASSPORT
                         */
                        secondDocumentType: string;
                        /**
                         * Format: YYYY-MM-DD
                         * @description The expiry date of the second document.
                         * @example 2030-09-23
                         */
                        secondDocumentExpiryDate: string;
                        /**
                         * @description The identification number of the associate as stated in the second document.
                         * @example 94091100007
                         */
                        identityNumberSecondDocument: string;
                        /**
                         * @description The nationality of the associate as stated in the second document.
                         * @example PL
                         */
                        nationalitySecondDocument: string;
                        /**
                         * Format: YYYY-MM-DD
                         * @description The date of birth of the associate as stated in the document.
                         * @example 2030-09-23
                         */
                        dateOfBirthSecondDocument: string;
                        /** @description External identifier of the Authologic verification process. */
                        authologicConversationID: string;
                    };
                };
            };
        };
        responses: {
            /** @description SUCCESS */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid input. Reason specified in content. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["400"];
                };
            };
            /** @description Verification not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["404"];
                };
            };
            /** @description Verification state does not allow operation. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["409"];
                };
            };
        };
    };
    "add-associates-documents": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Unique id of the verification provided by PayU. */
                    verificationId: string;
                    /** @description Unique id of an associate assigned by the Marketplace. */
                    associateId: string;
                    /**
                     * @description Document type.
                     * @enum {string}
                     */
                    type: "ID_CARD" | "PASSPORT" | "DRIVING_LICENCE" | "RESIDENCE_PERMIT" | "OTHER_DOCUMENT" | "PEP_STATEMENT";
                    /**
                     * Format: String[]
                     * @description List of file ids given in a response to the dataloading/files request. Can be many IDs in this field when one document contains many files.
                     */
                    files: string[];
                    /** @description Unique document ID assigned by the Marketplace. */
                    documentId: string;
                    /** @description Serial number of the provided document. */
                    documentNumber?: string;
                    /**
                     * Format: YYYY-MM-DD
                     * @description Issue date of the document.
                     */
                    issueDate?: string;
                    /**
                     * Format: YYYY-MM-DD
                     * @description Expiry date of the document.
                     */
                    expireDate: string;
                    note?: string;
                    /**
                     * Format: String[]
                     * @description `fileId` of translation of documents (Polish or English documents do not need to be translated)
                     */
                    translationFiles?: string[];
                };
            };
        };
        responses: {
            /** @description SUCCESS */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid input. Reason specified in content. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["400"];
                };
            };
            /** @description Verification not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["404"];
                };
            };
            /** @description Verification state does not allow operation. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["409"];
                };
            };
        };
    };
    "add-files": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Unique id of the verification provided by PayU. */
                    verificationId: string;
                    filename: string;
                    content?: string;
                };
            };
        };
        responses: {
            /** @description SUCCESS */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Unique id of the verification provided by PayU.
                         * @example aZx65uY
                         */
                        verifictionId?: string;
                        /** @description Identificator of uploaded file given by PayU. Please save it for whole process of verification – this will be used in dataloading/../documents request. */
                        fileId?: string;
                    };
                };
            };
            /** @description Invalid input. Reason specified in content. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["400"];
                };
            };
            /** @description Verification not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["404"];
                };
            };
            /** @description Verification state does not allow operation. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["409"];
                };
            };
        };
    };
    "create-order-for-verification-transfer": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Unique id of the verification provided by PayU.
                     * @example verification-123
                     */
                    verificationId: string;
                    /** @example PLN */
                    transferCurrency?: string;
                    /** @example user@example.com */
                    email?: string;
                    /** @description Changes the language of the sent email message. Possible values you can find in <b><a href="/europe/docs/get-started/introduction/#languages" target="_blank">languages</a></b> table. */
                    language?: string;
                };
            };
        };
        responses: {
            /** @description Details for bank transfer. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 5f7007da-8e05-4f0f-9503-05c053034bde */
                        verificationTransferId?: string;
                        /** @example 2020-08-20T14:03:44.473Z */
                        expirationTime?: string;
                        transferData?: {
                            /** @example mBank S.A. */
                            bankName?: string;
                            /** @example PL12114011243630011718031748 */
                            accountNumber?: string;
                            /** @example BREXPLPW */
                            swiftCode?: string;
                            /** @example PayU S.A. */
                            recipientName?: string;
                            /** @example ul. Grunwaldzka 186, 60-166 Poznań */
                            recipientAddress?: string;
                            /** @example Verification transfer XX1718031748XX */
                            transferTitle?: string;
                            /** @example 101 */
                            transferAmount?: number;
                            /** @example PLN */
                            transferCurrency?: string;
                        };
                    };
                };
            };
            /** @description Error encountered during posting the data for verification. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["400"];
                };
            };
            /** @description Error encountered during posting the data for verification. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["403"];
                };
            };
            /** @description Error encountered during posting the data for verification. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["404"];
                };
            };
        };
    };
    "add-bank-account-for-payouts": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PayoutWithVerificationTransfer"] | components["schemas"]["PayoutWithoutVerificationTransfer"] | components["schemas"]["PayoutBankStatement"];
            };
        };
        responses: {
            /** @description SUCCESS */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error encountered during posting the data for verification */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["400"];
                };
            };
            /** @description Error encountered during posting the data for verification */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["403"];
                };
            };
            /** @description Error encountered during posting the data for verification */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["404"];
                };
            };
            /** @description Verification state does not allow operation. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["409"];
                };
            };
        };
    };
    "add-payoneer-account-for-payouts": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Id of the bank account details assigned by marketplace.
                     * @example acc1sd
                     */
                    bankDataId: string;
                    /**
                     * @description Unique id of the verification provided by PayU.
                     * @example hfs6sfa
                     */
                    verificationId: string;
                    /** @description Id of the account of the submerchant in the Payoneer. */
                    payoneerId: string;
                };
            };
        };
        responses: {
            /** @description SUCCESS */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid input. Reason specified in content. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["400"];
                };
            };
            /** @description Verification not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["404"];
                };
            };
            /** @description Verification state does not allow operation. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["409"];
                };
            };
        };
    };
    "add-worldfirst-account-for-payouts": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Id of the bank account details assigned by marketplace.
                     * @example acc1sd
                     */
                    bankDataId: string;
                    /**
                     * @description Unique id of the verification provided by PayU.
                     * @example hfs6sfa
                     */
                    verificationId: string;
                    /** @description Id of the account binding between the marketplace and the WorldFirst. */
                    referenceCustomerId: string;
                };
            };
        };
        responses: {
            /** @description SUCCESS */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid input. Reason specified in content. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["400"];
                };
            };
            /** @description Verification not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["404"];
                };
            };
            /** @description Verification state does not allow operation. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["409"];
                };
            };
        };
    };
    "complete-marketplace-verification": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Unique id of the verification provided by PayU.
                     * @example hfs6sfa
                     */
                    verificationId: string;
                };
            };
        };
        responses: {
            /** @description SUCCESS */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid input. Reason specified in content. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["400"];
                };
            };
            /** @description Verification not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["404"];
                };
            };
            /** @description Verification state does not allow operation. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["409"];
                };
            };
        };
    };
    "cancel-marketplace-verification": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Unique id of the verification provided by PayU.
                     * @example hfs6sfa
                     */
                    verificationId: string;
                    /** @description Reason for cancelling verification. */
                    rejectionReasonComment?: string;
                };
            };
        };
        responses: {
            /** @description SUCCESS */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Verification not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["404"];
                };
            };
            /** @description Verification state does not allow cancel. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["409"];
                };
            };
        };
    };
    "retrieve-card-installments": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Card BIN to retrieve card installments data.
                     * @example 5364477839
                     */
                    cardBin: string;
                    /**
                     * @description Amount of the transaction for which you want to retrieve available installments options.
                     * @example 203018
                     */
                    posId: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Section containing available installments options. */
                        numbers?: [
                            number,
                            number,
                            number
                        ];
                        /**
                         * @description Card installments program provider.
                         * @example BRD_INSTALLMENTS
                         */
                        provider?: string;
                        /** @description Object representing specific provider settings. */
                        settings?: {
                            /**
                             * @description If this option is returned for a given card BIN number, then to use the given installment plan for that card, the order amount must be higher. If it is lower or equal, the order will be rejected.
                             * @example 60000
                             */
                            minAmount?: number;
                        };
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Error message
                         * @example Either posId or internalPosId has to be provided.
                         */
                        message?: string;
                    };
                };
            };
        };
    };
    "retrieve-statement": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path: {
                /** @example 4a3534fb-85b5-4f29-9da8-a6d73b34d528 */
                reportId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    "create-a-firm": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token with <code>grant_type=client_credentials</code>.
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Full legal name.
                     * @example Test sp. z o.o.
                     */
                    name: string;
                    /**
                     * @description Dictionary value - legal entity type. Dictionaries for specific origin are available here. For a firm which <code>address.country</code> code is not equal to <code>businessArea.origin</code> please use <b>FZ</b> type. <b>Providing accurate type speeds up merchant verification.</b>
                     * @example SO
                     */
                    type: string;
                    /**
                     * @description Tax identification.
                     * @example 3771910486
                     */
                    taxId: string;
                    /**
                     * @description Type of tax identification.
                     * @example NIP
                     * @enum {string}
                     */
                    taxIdType: "NIP" | "VAT_EU" | "TAX_ID";
                    /**
                     * @description Business identification. IČ (CZ) or REGON (PL).
                     * @example 138237420
                     */
                    cin: string;
                    /**
                     * Format: IBAN
                     * @description Primary bank account to receive payouts for payments. Will be inherited by all <b>shops</b> created for this firm. Must be a valid IBAN number in case of firms with <b>PL</b> origin. <b>Different bank account maybe defined at shop level manually, via PayU merchant panel.</b>
                     * @example PL92906300080597567560803897
                     */
                    bankAccount: string;
                    /**
                     * @description Your partner id.
                     * @example egmcvdo5
                     */
                    partnerId: string;
                    /**
                     * @description Preferred language for communication.
                     * @example PL
                     * @enum {string}
                     */
                    contactLanguage?: "EN" | "PL" | "CS" | "RO";
                    /** @description Business area of the registered firm. */
                    businessArea: {
                        /**
                         * @description Denotes firm origin and applies validation and requirements for this origin. Currently only two values are available: <b>CZ</b> and <b>PL</b>. <b>It is still possible to register a firm which is incorporated outside of Czechia or Poland</b>.
                         * @example PL
                         */
                        origin: string;
                    };
                    /** @description Array of PayU panel users. At least 1 must be provided. */
                    users: {
                        /**
                         * @description User's first name.
                         * @example Jan
                         */
                        name: string;
                        /**
                         * @description User's last name.
                         * @example Nowak
                         */
                        surname: string;
                        /**
                         * @description User's email.
                         * @example jan.nowak@testowa.pl
                         */
                        email: string;
                        /**
                         * @description User's phone number.
                         * @example 123123123
                         */
                        phone?: string;
                        /**
                         * @description User's role.
                         * @example MANAGER
                         * @enum {string}
                         */
                        role: "MANAGER" | "USER";
                    }[];
                    /** @description Array of firm legal representatives. At least 1 must be provided. */
                    representatives: {
                        /**
                         * @description Representative's first name.
                         * @example Jan
                         */
                        name: string;
                        /**
                         * @description Representative's last name.
                         * @example Nowak
                         */
                        surname: string;
                        /**
                         * @description Representative's national identity number (PESEL). <b>Required only for Polish citizens</b>
                         * @example 80010104578
                         */
                        nin?: string;
                        /**
                         * @description Representative's citizenship. Must be a valid ISO 3166-1 two-letter code.
                         * @example PL
                         */
                        countryCode: string;
                        /**
                         * Format: RRRR-MM-DD
                         * @description Representative's date of birth. <b>Required only for non-Polish citizens</b>
                         * @example 2000-01-01
                         */
                        birthDate?: string;
                    }[];
                    /** @description Object containing firm's contact details. */
                    contactData: {
                        /**
                         * @description Firm's contact phone number.
                         * @example 123123123
                         */
                        phone: string;
                        /**
                         * @description Firm's contact email address.
                         * @example biuro@testowa.pl
                         */
                        email: string;
                    };
                    /** @description Object containing firm's technical contact details (e.g. to the developer responsible for integration with PayU). */
                    technicalContactData?: Record<string, never>;
                    /** @description Firm's registration address. */
                    address: {
                        /**
                         * @description Firm's registration address street.
                         * @example Grunwaldzka
                         */
                        street: string;
                        /**
                         * @description Firm's registration address house number.
                         * @example 186
                         */
                        houseNo: string;
                        /**
                         * @description Firm's registration address apartment number.
                         * @example 1
                         */
                        apartmentNo: string;
                        /**
                         * @description Firm's registration address postal code.
                         * @example 61-166
                         */
                        postalCode: string;
                        /**
                         * @description Firm's registration address city.
                         * @example Poznań
                         */
                        city: string;
                        /**
                         * @description Firm's registration address country code. Must be a valid ISO 3166-1 two-letter code.
                         * @example PL
                         */
                        countryCode: string;
                    };
                    /** @description Firm's correspondence address (<b>if other than registration address</b>). This object the same fields as address. */
                    correspondenceAddress?: {
                        /**
                         * @description Firm's registration address street.
                         * @example Grunwaldzka
                         */
                        street: string;
                        /**
                         * @description Firm's registration address house number.
                         * @example 186
                         */
                        houseNo: string;
                        /**
                         * @description Firm's registration address apartment number.
                         * @example 1
                         */
                        apartmentNo: string;
                        /**
                         * @description Firm's registration address postal code.
                         * @example 61-166
                         */
                        postalCode: string;
                        /**
                         * @description Firm's registration address city.
                         * @example Poznań
                         */
                        city: string;
                        /**
                         * @description Firm's registration address country code. Must be a valid ISO 3166-1 two-letter code.
                         * @example PL
                         */
                        countryCode: string;
                    };
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Identifier that needs to be stored in your system and is used to create further entities for that firm.
                         * @example KzXy4ZzD
                         */
                        firmId?: string;
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["401"];
                };
            };
        };
    };
    "create-a-url-for-the-partners-firm": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token with <code>grant_type=partner</code>.
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path: {
                /**
                 * @description Firm identifier retrieved after firm creation.
                 * @example KzXy4ZzD
                 */
                firmId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description URL address.
                     * @example http://www.test-url.com
                     */
                    value: string;
                    /**
                     * @description Merchant Category Code (value is validated). Data type
                     * @example 0742
                     */
                    mcc?: string;
                    /** @description Array of service types. */
                    services: {
                        /**
                         * @description Dictionary value:<ul> <li><b>TRANSFERS</b> - online transfers ("pay-by-links" and standard bank transfers, incl. Blik),</li> <li><b>CARD</b> - cards (Visa, Mastercard) and digital wallets (Apple Pay, Google Pay),</li> <li><b>INSTALLMENTS</b> - online installments,</li> <li><b>DELAYED_PAYMENTS</b> - "pay later" methods.</li></ul>
                         * @example TRANSFERS
                         * @enum {string}
                         */
                        type: "TRANSFERS" | "CARD" | "INSTALLMENTS" | "DELAYED_PAYMENTS";
                    }[];
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description urlId that needs to be stored in your system can be used to create shop.
                         * @example PItR5x0v
                         */
                        urlId?: string;
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["401"];
                };
            };
        };
    };
    "create-a-shop-for-the-partner": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token with <code>grant_type=partner</code>.
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path: {
                /**
                 * @description Firm identifier retrieved after firm creation.
                 * @example KzXy4ZzD
                 */
                firmId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Shop name - will be visible in the merchant panel.
                     * @example Shop name
                     */
                    name: string;
                    /**
                     * @description Shop description - more detailed info, visible in the merchant panel.
                     * @example Shop description
                     */
                    description?: string;
                    /**
                     * @description Must be a three-letter ISO 4217 currency code. Please contact your key account manager to get more information about available currencies.
                     * @example EUR
                     */
                    currencyCode: string;
                    /**
                     * @description Reference to previously created <b>URL</b>.
                     * @example PItR5x0v
                     */
                    urlId: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Identifier that needs to be stored in merchant's system and is used to create POS.
                         * @example ycmGyfCv
                         */
                        shopId?: string;
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["401"];
                };
            };
        };
    };
    "create-pos-for-partner": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token with <code>grant_type=partner</code>.
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path: {
                /** @example Shop identifier retrieved after shop creation. */
                shopId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Name of the created POS.
                     * @example Test POS
                     */
                    name: string;
                    /**
                     * @description Type of the created POS.
                     * @example REST
                     */
                    type: string;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Identifier of the created POS.
                         * @example JyoMIVTY
                         */
                        posId?: string;
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["401"];
                };
            };
        };
    };
    "retrieve-partners-pos-data": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token with <code>grant_type=partner</code>.
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path: {
                /** @example POS identifier retrieved after POS creation. */
                posId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Public POS ID.
                         * @example JyoMIVTY
                         */
                        posId?: string;
                        /**
                         * @description POS type (determines API that can be used).
                         * @example REST
                         */
                        type?: string;
                        /**
                         * @description POS name.
                         * @example Test POS
                         */
                        name?: string;
                        /**
                         * @description Determines encoding used by PayU system to read API requests. Always <b>UTF-8</b> for <b>REST</b> type.
                         * @example UTF-8
                         */
                        encoding?: string;
                        /** @description Object with authorization details. */
                        authorization?: {
                            standard?: {
                                /**
                                 * @description POS identifier used for API calls. It has the same value as the `client_id` used in the OAuth calls.
                                 * @example 385234
                                 */
                                merchantPosId?: string;
                                /**
                                 * @description Has the same value as the "`client_secret` used to obtain OAuth access tokens for REST API calls.
                                 * @example 9c0041e05fdee99749de4c2d2ce4c66e"
                                 */
                                key?: string;
                                /**
                                 * @description The second API key is utilized for signing notifications sent by PayU, as well as for verifying the notification signature provided by PayU. Additionally, it is used for basic authorization when fetching statement files via the API.
                                 * @example f096a39d78fbe03b8d23dde43b728cfd
                                 */
                                secondKey?: string;
                                /**
                                 * @description Not required for REST API.
                                 * @example uHcZ9Ly
                                 */
                                authKey?: string;
                            };
                        };
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["401"];
                };
            };
        };
    };
    "create-a-user": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token with <code>grant_type=partner</code>.
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path: {
                /**
                 * @description Firm identifier retrieved after firm creation.
                 * @example KzXy4ZzD
                 */
                firmId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    user: {
                        /**
                         * @description First name of the new user.
                         * @example Joe
                         */
                        name: string;
                        /**
                         * @description Last name of the new user.
                         * @example Doe
                         */
                        surname: string;
                        /**
                         * @description Email address of the new user.
                         * @example joe.doe@test.com
                         */
                        email: string;
                        /** @description Phone number of the new user. */
                        phone?: string;
                        /**
                         * @description Role specified for the new user.
                         * @example manager
                         * @enum {string}
                         */
                        role: "manager" | "user";
                    };
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description New user identifier.
                         * @example 2e629a11-8add-49c5-bf27-a7f684721b86
                         */
                        userId?: string;
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["401"];
                };
            };
        };
    };
    "create-a-submerchant": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path: {
                /** @description Firm id in alphanumeric format, visible in the merchant panel. */
                firmPublicId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Card"] | components["schemas"]["CardPbl"] | components["schemas"]["Pbl"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Id assigned by PayU and required in OrderCreateRequest. */
                        id?: string;
                        /** @description Id assigned by the Payment Facilitator. */
                        externalId?: string;
                        /**
                         * @description Submerchant status.
                         * @enum {string}
                         */
                        status?: "NOT_ACTIVE" | "ACTIVE" | "BLOCKED";
                        /**
                         * Format: YYYY-MM-DDThh:mm:ss±hh:mm
                         * @description Datetime of resource creation or last update (if applicable) in ISO 8601 format.
                         */
                        lastUpdated?: string;
                        /** @description Notifications regarding submerchant status change will be sent to address provided in this field. */
                        notifyUrl?: string;
                        /** @description Full legal (registration) name. */
                        legalName?: string;
                        /** @description "Doing business as" name, usually simplified website address which can be recognized by customer (e.g. when displayed on card statement). */
                        dbaName?: string;
                        /** @description Legal address object. */
                        address?: {
                            /** @description Legal address street including house/apartment number (if applicable). */
                            street?: string;
                            /** @description Legal address city. */
                            city?: string;
                            /** @description Legal address postal code. */
                            postalCode?: string;
                            /** @description Legal address country code. Must be a valid ISO 3166-1 two-letter code. */
                            countryCode?: string;
                        };
                        /** @description Contact phone number. */
                        phone?: string;
                        /** @description A valid URL address of merchant's website. */
                        websiteUrl?: string;
                        /** @description Accurate Merchant Category Code established during KYC process by the PF. */
                        mcc?: number;
                        /**
                         * @description Risk class assigned by Payment Facilitator (basing on requirements provided by PayU).
                         * @enum {string}
                         */
                        riskClass?: "LOW" | "NORMAL" | "HIGH";
                        /** @description Tax identification (e.g. NIP in Poland) or business identification (e.g. IČ in Czechia). */
                        taxId?: string;
                        /** @description Array of either principals or enterprise owners (depends on legal form). Minimum one is required. */
                        representatives?: {
                            /** @description Representative's name. */
                            name?: string;
                            /** @description Representative's phone number. */
                            phone?: string;
                        }[];
                        /** @description Dictionary value - legal entity type. Dictionaries for specific origin are available here. */
                        legalForm?: string;
                        /**
                         * Format: yyyy-mm-dd
                         * @description Date when PF signed agreement with the submerchant (required by Visa for reporting purposes).
                         */
                        agreementDate?: string;
                        /** @description Array of enumerated values: CARD, PBL. Minimum one is required. */
                        payTypeCategories?: string;
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["401"];
                };
            };
        };
    };
    "retrieve-submerchant-data": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path: {
                /** @description Firm id in alphanumeric format, visible in the merchant panel. */
                firmPublicId: string;
                /** @description Id returned by PayU upon submerchant registration. */
                submerchantId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Id assigned by PayU and required in OrderCreateRequest. */
                        id?: string;
                        /** @description Id assigned by the Payment Facilitator. */
                        externalId?: string;
                        /**
                         * @description Submerchant status.
                         * @enum {string}
                         */
                        status?: "NOT_ACTIVE" | "ACTIVE" | "BLOCKED";
                        /**
                         * Format: YYYY-MM-DDThh:mm:ss±hh:mm
                         * @description Datetime of resource creation or last update (if applicable) in ISO 8601 format.
                         */
                        lastUpdated?: string;
                        /** @description Notifications regarding submerchant status change will be sent to address provided in this field. */
                        notifyUrl?: string;
                        /** @description Full legal (registration) name. */
                        legalName?: string;
                        /** @description "Doing business as" name, usually simplified website address which can be recognized by customer (e.g. when displayed on card statement). */
                        dbaName?: string;
                        /** @description Legal address object. */
                        address?: {
                            /** @description Legal address street including house/apartment number (if applicable). */
                            street?: string;
                            /** @description Legal address city. */
                            city?: string;
                            /** @description Legal address postal code. */
                            postalCode?: string;
                            /** @description Legal address country code. Must be a valid ISO 3166-1 two-letter code. */
                            countryCode?: string;
                        };
                        /** @description Contact phone number. */
                        phone?: string;
                        /** @description A valid URL address of merchant's website. */
                        websiteUrl?: string;
                        /** @description Accurate Merchant Category Code established during KYC process by the PF. */
                        mcc?: number;
                        /**
                         * @description Risk class assigned by Payment Facilitator (basing on requirements provided by PayU).
                         * @enum {string}
                         */
                        riskClass?: "LOW" | "NORMAL" | "HIGH";
                        /** @description Tax identification (e.g. NIP in Poland) or business identification (e.g. IČ in Czechia). */
                        taxId?: string;
                        /** @description Array of either principals or enterprise owners (depends on legal form). Minimum one is required. */
                        representatives?: {
                            /** @description Representative's name. */
                            name?: string;
                            /** @description Representative's phone number. */
                            phone?: string;
                        }[];
                        /** @description Dictionary value - legal entity type. Dictionaries for specific origin are available here. */
                        legalForm?: string;
                        /**
                         * Format: yyyy-mm-dd
                         * @description Date when PF signed agreement with the submerchant (required by Visa for reporting purposes).
                         */
                        agreementDate?: string;
                        /** @description Array of enumerated values: CARD, PBL. Minimum one is required. */
                        payTypeCategories?: string;
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["401"];
                };
            };
        };
    };
    "update-submerchants-data": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content type
                 * @example application/json
                 */
                "Content-Type": string;
                /**
                 * @description Auth token
                 * @example Bearer 3e5cac39-7e38-4139-8fd6-30adc06a61bd
                 */
                Authorization: string;
            };
            path: {
                /** @description Firm id in alphanumeric format, visible in the merchant panel. */
                firmPublicId: string;
                /** @description Id returned by PayU upon submerchant registration. */
                submerchantId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Card"] | components["schemas"]["CardPbl"] | components["schemas"]["Pbl"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Id assigned by PayU and required in OrderCreateRequest. */
                        id?: string;
                        /** @description Id assigned by the Payment Facilitator. */
                        externalId?: string;
                        /**
                         * @description Submerchant status.
                         * @enum {string}
                         */
                        status?: "NOT_ACTIVE" | "ACTIVE" | "BLOCKED";
                        /**
                         * Format: YYYY-MM-DDThh:mm:ss±hh:mm
                         * @description Datetime of resource creation or last update (if applicable) in ISO 8601 format.
                         */
                        lastUpdated?: string;
                        /** @description Notifications regarding submerchant status change will be sent to address provided in this field. */
                        notifyUrl?: string;
                        /** @description Full legal (registration) name. */
                        legalName?: string;
                        /** @description "Doing business as" name, usually simplified website address which can be recognized by customer (e.g. when displayed on card statement). */
                        dbaName?: string;
                        /** @description Legal address object. */
                        address?: {
                            /** @description Legal address street including house/apartment number (if applicable). */
                            street?: string;
                            /** @description Legal address city. */
                            city?: string;
                            /** @description Legal address postal code. */
                            postalCode?: string;
                            /** @description Legal address country code. Must be a valid ISO 3166-1 two-letter code. */
                            countryCode?: string;
                        };
                        /** @description Contact phone number. */
                        phone?: string;
                        /** @description A valid URL address of merchant's website. */
                        websiteUrl?: string;
                        /** @description Accurate Merchant Category Code established during KYC process by the PF. */
                        mcc?: number;
                        /**
                         * @description Risk class assigned by Payment Facilitator (basing on requirements provided by PayU).
                         * @enum {string}
                         */
                        riskClass?: "LOW" | "NORMAL" | "HIGH";
                        /** @description Tax identification (e.g. NIP in Poland) or business identification (e.g. IČ in Czechia). */
                        taxId?: string;
                        /** @description Array of either principals or enterprise owners (depends on legal form). Minimum one is required. */
                        representatives?: {
                            /** @description Representative's name. */
                            name?: string;
                            /** @description Representative's phone number. */
                            phone?: string;
                        }[];
                        /** @description Dictionary value - legal entity type. Dictionaries for specific origin are available here. */
                        legalForm?: string;
                        /**
                         * Format: yyyy-mm-dd
                         * @description Date when PF signed agreement with the submerchant (required by Visa for reporting purposes).
                         */
                        agreementDate?: string;
                        /** @description Array of enumerated values: CARD, PBL. Minimum one is required. */
                        payTypeCategories?: string;
                    };
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["401"];
                };
            };
        };
    };
}
